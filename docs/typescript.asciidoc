[[typescript]]
== TypeScript support

The client offers a first-class support for TypeScript, since it ships the type definitions for every exposed API.

While the client offers type definitions for Request parameters, Request bodies and responses are shipped with https://www.typescriptlang.org/docs/handbook/generics.html[generics] (with a default type of `any`) because there is not an official spec that defines them, so we cannot make guarantees over them.

NOTE: If you are using TypeScript you will be required to use _snake_case_ style to define the API parameters instead of _camelCase_. 

Following you can find an example that uses TypeScript and extends the default API response via generics.

[source,ts]
----
import {
  Client,
  // Object that contains the type definitions
  // of every API method
  RequestParams,
  // Interface of the generic API response
  ApiResponse,
} from '@elastic/elasticsearch'

const client = new Client({ node: 'http://localhost:9200' })

interface ShardsResponse {
  total: number;
  successful: number;
  failed: number;
  skipped: number;
}

interface Explanation {
  value: number;
  description: string;
  details: Explanation[];
}

interface SearchResponse<T> {
  took: number;
  timed_out: boolean;
  _scroll_id?: string;
  _shards: ShardsResponse;
  hits: {
    total: number;
    max_score: number;
    hits: Array<{
      _index: string;
      _type: string;
      _id: string;
      _score: number;
      _source: T;
      _version?: number;
      _explanation?: Explanation;
      fields?: any;
      highlight?: any;
      inner_hits?: any;
      matched_queries?: string[];
      sort?: string[];
    }>;
  };
  aggregations?: any;
}

async function run (): Promise<void> {
  // Define the search parameters
  const searchParams: RequestParams.Search = {
    index: 'test',
    q: 'foo:bar'
  }

  // Define the intefrace of the source object
  interface Source {
    foo: string
  }

  // Craft the final type definition
  const response: ApiResponse<SearchResponse<Source>> = await client.search(searchParams)
  console.log(response.body)
}

run().catch(console.log)
----
