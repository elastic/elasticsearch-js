[[reference-nodes]]
== client.nodes

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[client.nodes.clearRepositoriesMeteringArchive]]
== `client.nodes.clearRepositoriesMeteringArchive()`

You can use this API to clear the archived repositories metering information in the cluster.

{ref}/clear-repositories-metering-archive-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesClearRepositoriesMeteringArchiveRequest, options?: TransportRequestOptions) => Promise<NodesClearRepositoriesMeteringArchiveResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesClearRepositoriesMeteringArchiveRequest extends <<RequestBase>> {
  node_id: <<NodeIds>>
  max_archive_version: <<long>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesClearRepositoriesMeteringArchiveResponse = NodesClearRepositoriesMeteringArchiveResponseBase

----


[discrete]
[[client.nodes.getRepositoriesMeteringInfo]]
== `client.nodes.getRepositoriesMeteringInfo()`

You can use the cluster repositories metering API to retrieve repositories metering information in a cluster. This API exposes monotonically non-decreasing counters and it’s expected that clients would durably store the information needed to compute aggregations over a period of time. Additionally, the information exposed by this API is volatile, meaning that it won’t be present after node restarts.

{ref}/get-repositories-metering-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesGetRepositoriesMeteringInfoRequest, options?: TransportRequestOptions) => Promise<NodesGetRepositoriesMeteringInfoResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesGetRepositoriesMeteringInfoRequest extends <<RequestBase>> {
  node_id: <<NodeIds>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesGetRepositoriesMeteringInfoResponse = NodesGetRepositoriesMeteringInfoResponseBase

----


[discrete]
[[client.nodes.hotThreads]]
== `client.nodes.hotThreads()`

This API yields a breakdown of the hot threads on each selected node in the cluster. The output is plain text with a breakdown of each node’s top hot threads.

{ref}/cluster-nodes-hot-threads.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesHotThreadsRequest, options?: TransportRequestOptions) => Promise<NodesHotThreadsResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesHotThreadsRequest extends <<RequestBase>> {
  node_id?: <<NodeIds>>
  ignore_idle_threads?: boolean
  interval?: <<Duration>>
  snapshots?: <<long>>
  master_timeout?: <<Duration>>
  threads?: <<long>>
  timeout?: <<Duration>>
  type?: <<ThreadType>>
  sort?: <<ThreadType>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface NodesHotThreadsResponse {}

----


[discrete]
[[client.nodes.info]]
== `client.nodes.info()`

Returns cluster nodes information.

{ref}/cluster-nodes-info.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesInfoRequest, options?: TransportRequestOptions) => Promise<NodesInfoResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesInfoRequest extends <<RequestBase>> {
  node_id?: <<NodeIds>>
  metric?: <<Metrics>>
  flat_settings?: boolean
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesInfoResponse = NodesInfoResponseBase

----


[discrete]
[[client.nodes.reloadSecureSettings]]
== `client.nodes.reloadSecureSettings()`

Reloads the keystore on nodes in the cluster.

{ref}/secure-settings.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesReloadSecureSettingsRequest, options?: TransportRequestOptions) => Promise<NodesReloadSecureSettingsResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesReloadSecureSettingsRequest extends <<RequestBase>> {
  node_id?: <<NodeIds>>
  timeout?: <<Duration>>
  secure_settings_password?: <<Password>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesReloadSecureSettingsResponse = NodesReloadSecureSettingsResponseBase

----


[discrete]
[[client.nodes.stats]]
== `client.nodes.stats()`

Returns cluster nodes statistics.

{ref}/cluster-nodes-stats.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesStatsRequest, options?: TransportRequestOptions) => Promise<NodesStatsResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesStatsRequest extends <<RequestBase>> {
  node_id?: <<NodeIds>>
  metric?: <<Metrics>>
  index_metric?: <<Metrics>>
  completion_fields?: <<Fields>>
  fielddata_fields?: <<Fields>>
  fields?: <<Fields>>
  groups?: boolean
  include_segment_file_sizes?: boolean
  level?: <<Level>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
  types?: string[]
  include_unloaded_segments?: boolean
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesStatsResponse = NodesStatsResponseBase

----


[discrete]
[[client.nodes.usage]]
== `client.nodes.usage()`

Returns information on the usage of features.

{ref}/cluster-nodes-usage.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: NodesUsageRequest, options?: TransportRequestOptions) => Promise<NodesUsageResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface NodesUsageRequest extends <<RequestBase>> {
  node_id?: <<NodeIds>>
  metric?: <<Metrics>>
  timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type NodesUsageResponse = NodesUsageResponseBase

----


