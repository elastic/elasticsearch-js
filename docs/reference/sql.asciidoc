[[reference-sql]]
== client.sql

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[client.sql.clearCursor]]
== `client.sql.clearCursor()`

Clear an SQL search cursor.

{ref}/clear-sql-cursor-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlClearCursorRequest, options?: TransportRequestOptions) => Promise<SqlClearCursorResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlClearCursorRequest extends <<RequestBase>> {
  cursor: string
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SqlClearCursorResponse {
  succeeded: boolean
}

----


[discrete]
[[client.sql.deleteAsync]]
== `client.sql.deleteAsync()`

Delete an async SQL search. Delete an async SQL search or a stored synchronous SQL search. If the search is still running, the API cancels it.

{ref}/delete-async-sql-search-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlDeleteAsyncRequest, options?: TransportRequestOptions) => Promise<SqlDeleteAsyncResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlDeleteAsyncRequest extends <<RequestBase>> {
  id: <<Id>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SqlDeleteAsyncResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.sql.getAsync]]
== `client.sql.getAsync()`

Get async SQL search results. Get the current status and available results for an async SQL search or stored synchronous SQL search.

{ref}/get-async-sql-search-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlGetAsyncRequest, options?: TransportRequestOptions) => Promise<SqlGetAsyncResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlGetAsyncRequest extends <<RequestBase>> {
  id: <<Id>>
  delimiter?: string
  format?: string
  keep_alive?: <<Duration>>
  wait_for_completion_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SqlGetAsyncResponse {
  id: <<Id>>
  is_running: boolean
  is_partial: boolean
  columns?: SqlColumn[]
  cursor?: string
  rows: SqlRow[]
}

----


[discrete]
[[client.sql.getAsyncStatus]]
== `client.sql.getAsyncStatus()`

Get the async SQL search status. Get the current status of an async SQL search or a stored synchronous SQL search.

{ref}/get-async-sql-search-status-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlGetAsyncStatusRequest, options?: TransportRequestOptions) => Promise<SqlGetAsyncStatusResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlGetAsyncStatusRequest extends <<RequestBase>> {
  id: <<Id>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SqlGetAsyncStatusResponse {
  id: string
  is_running: boolean
  is_partial: boolean
  start_time_in_millis: <<EpochTime>><<<UnitMillis>>>
  expiration_time_in_millis: <<EpochTime>><<<UnitMillis>>>
  completion_status?: <<uint>>
}

----


[discrete]
[[client.sql.query]]
== `client.sql.query()`

Get SQL search results. Run an SQL request.

{ref}/sql-search-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlQueryRequest, options?: TransportRequestOptions) => Promise<SqlQueryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlQueryRequest extends <<RequestBase>> {
  format?: SqlQuerySqlFormat
  catalog?: string
  columnar?: boolean
  cursor?: string
  fetch_size?: <<integer>>
  filter?: <<QueryDslQueryContainer>>
  query?: string
  request_timeout?: <<Duration>>
  page_timeout?: <<Duration>>
  time_zone?: <<TimeZone>>
  field_multi_value_leniency?: boolean
  runtime_mappings?: <<MappingRuntimeFields>>
  wait_for_completion_timeout?: <<Duration>>
  params?: Record<string, any>
  keep_alive?: <<Duration>>
  keep_on_completion?: boolean
  index_using_frozen?: boolean
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SqlQueryResponse {
  id?: <<Id>>
  is_running?: boolean
  is_partial?: boolean
  columns?: SqlColumn[]
  cursor?: string
  rows: SqlRow[]
}

----


[discrete]
[[client.sql.translate]]
== `client.sql.translate()`

Translate SQL into Elasticsearch queries. Translate an SQL search into a search API request containing Query DSL.

{ref}/sql-translate-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SqlTranslateRequest, options?: TransportRequestOptions) => Promise<SqlTranslateResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SqlTranslateRequest extends <<RequestBase>> {
  fetch_size?: <<integer>>
  filter?: <<QueryDslQueryContainer>>
  query: string
  time_zone?: <<TimeZone>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SqlTranslateResponse {
  aggregations?: Record<string, <<AggregationsAggregationContainer>>>
  size?: <<long>>
  _source?: <<SearchSourceConfig>>
  fields?: (<<QueryDslFieldAndFormat>> | <<Field>>)[]
  query?: <<QueryDslQueryContainer>>
  sort?: <<Sort>>
}

----


