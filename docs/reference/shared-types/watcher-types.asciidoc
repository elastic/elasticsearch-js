[[reference-shared-types-watcher-types]]

=== `Watcher` types

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[WatcherAcknowledgeState]]
=== WatcherAcknowledgeState

[source,ts,subs=+macros]
----
interface WatcherAcknowledgeState {
  state: <<WatcherAcknowledgementOptions>>
  timestamp: <<DateTime>>
}
----


[discrete]
[[WatcherAcknowledgementOptions]]
=== WatcherAcknowledgementOptions

[source,ts,subs=+macros]
----
type WatcherAcknowledgementOptions = 'awaits_successful_execution' | 'ackable' | 'acked'
----


[discrete]
[[WatcherAction]]
=== WatcherAction

[source,ts,subs=+macros]
----
interface WatcherAction {
  action_type?: <<WatcherActionType>>
  condition?: <<WatcherConditionContainer>>
  foreach?: string
  max_iterations?: <<integer>>
  name?: <<Name>>
  throttle_period?: <<Duration>>
  throttle_period_in_millis?: <<DurationValue>><<<UnitMillis>>>
  transform?: <<TransformContainer>>
  index?: <<WatcherIndexAction>>
  logging?: <<WatcherLoggingAction>>
  email?: <<WatcherEmailAction>>
  pagerduty?: <<WatcherPagerDutyAction>>
  slack?: <<WatcherSlackAction>>
  webhook?: <<WatcherWebhookAction>>
}
----


[discrete]
[[WatcherActionExecutionMode]]
=== WatcherActionExecutionMode

[source,ts,subs=+macros]
----
type WatcherActionExecutionMode = 'simulate' | 'force_simulate' | 'execute' | 'force_execute' | 'skip'
----


[discrete]
[[WatcherActionStatus]]
=== WatcherActionStatus

[source,ts,subs=+macros]
----
interface WatcherActionStatus {
  ack: <<WatcherAcknowledgeState>>
  last_execution?: <<WatcherExecutionState>>
  last_successful_execution?: <<WatcherExecutionState>>
  last_throttle?: <<WatcherThrottleState>>
}
----


[discrete]
[[WatcherActionStatusOptions]]
=== WatcherActionStatusOptions

[source,ts,subs=+macros]
----
type WatcherActionStatusOptions = 'success' | 'failure' | 'simulated' | 'throttled'
----


[discrete]
[[WatcherActionType]]
=== WatcherActionType

[source,ts,subs=+macros]
----
type WatcherActionType = 'email' | 'webhook' | 'index' | 'logging' | 'slack' | 'pagerduty'
----


[discrete]
[[WatcherActions]]
=== WatcherActions

[source,ts,subs=+macros]
----
type WatcherActions = Record<<<IndexName>>, <<WatcherActionStatus>>>
----


[discrete]
[[WatcherActivationState]]
=== WatcherActivationState

[source,ts,subs=+macros]
----
interface WatcherActivationState {
  active: boolean
  timestamp: <<DateTime>>
}
----


[discrete]
[[WatcherActivationStatus]]
=== WatcherActivationStatus

[source,ts,subs=+macros]
----
interface WatcherActivationStatus {
  actions: <<WatcherActions>>
  state: <<WatcherActivationState>>
  version: <<VersionNumber>>
}
----


[discrete]
[[WatcherAlwaysCondition]]
=== WatcherAlwaysCondition

[source,ts,subs=+macros]
----
interface WatcherAlwaysCondition {}
----


[discrete]
[[WatcherArrayCompareCondition]]
=== WatcherArrayCompareCondition

[source,ts,subs=+macros]
----
interface WatcherArrayCompareConditionKeys {
  path: string
}
type WatcherArrayCompareCondition = WatcherArrayCompareConditionKeys
  & { [property: string]: <<WatcherArrayCompareOpParams>> | string }
----


[discrete]
[[WatcherArrayCompareOpParams]]
=== WatcherArrayCompareOpParams

[source,ts,subs=+macros]
----
interface WatcherArrayCompareOpParams {
  quantifier: <<WatcherQuantifier>>
  value: <<FieldValue>>
}
----


[discrete]
[[WatcherChainInput]]
=== WatcherChainInput

[source,ts,subs=+macros]
----
interface WatcherChainInput {
  inputs: Partial<Record<string, <<WatcherInputContainer>>>>[]
}
----


[discrete]
[[WatcherConditionContainer]]
=== WatcherConditionContainer

[source,ts,subs=+macros]
----
interface WatcherConditionContainer {
  always?: <<WatcherAlwaysCondition>>
  array_compare?: Partial<Record<string, <<WatcherArrayCompareCondition>>>>
  compare?: Partial<Record<string, Partial<Record<<<WatcherConditionOp>>, <<FieldValue>>>>>>
  never?: <<WatcherNeverCondition>>
  script?: <<WatcherScriptCondition>>
}
----


[discrete]
[[WatcherConditionOp]]
=== WatcherConditionOp

[source,ts,subs=+macros]
----
type WatcherConditionOp = 'not_eq' | 'eq' | 'lt' | 'gt' | 'lte' | 'gte'
----


[discrete]
[[WatcherConditionType]]
=== WatcherConditionType

[source,ts,subs=+macros]
----
type WatcherConditionType = 'always' | 'never' | 'script' | 'compare' | 'array_compare'
----


[discrete]
[[WatcherConnectionScheme]]
=== WatcherConnectionScheme

[source,ts,subs=+macros]
----
type WatcherConnectionScheme = 'http' | 'https'
----


[discrete]
[[WatcherCronExpression]]
=== WatcherCronExpression

[source,ts,subs=+macros]
----
type WatcherCronExpression = string
----


[discrete]
[[WatcherDailySchedule]]
=== WatcherDailySchedule

[source,ts,subs=+macros]
----
interface WatcherDailySchedule {
  at: <<WatcherScheduleTimeOfDay>>[]
}
----


[discrete]
[[WatcherDataAttachmentFormat]]
=== WatcherDataAttachmentFormat

[source,ts,subs=+macros]
----
type WatcherDataAttachmentFormat = 'json' | 'yaml'
----


[discrete]
[[WatcherDataEmailAttachment]]
=== WatcherDataEmailAttachment

[source,ts,subs=+macros]
----
interface WatcherDataEmailAttachment {
  format?: <<WatcherDataAttachmentFormat>>
}
----


[discrete]
[[WatcherDay]]
=== WatcherDay

[source,ts,subs=+macros]
----
type WatcherDay = 'sunday' | 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday'
----


[discrete]
[[WatcherEmail]]
=== WatcherEmail

[source,ts,subs=+macros]
----
interface WatcherEmail {
  id?: <<Id>>
  bcc?: string[]
  body?: <<WatcherEmailBody>>
  cc?: string[]
  from?: string
  priority?: <<WatcherEmailPriority>>
  reply_to?: string[]
  sent_date?: <<DateTime>>
  subject: string
  to: string[]
  attachments?: Record<string, <<WatcherEmailAttachmentContainer>>>
}
----


[discrete]
[[WatcherEmailAction]]
=== WatcherEmailAction

[source,ts,subs=+macros]
----
interface WatcherEmailAction extends <<WatcherEmail>> {}
----


[discrete]
[[WatcherEmailAttachmentContainer]]
=== WatcherEmailAttachmentContainer

[source,ts,subs=+macros]
----
interface WatcherEmailAttachmentContainer {
  http?: <<WatcherHttpEmailAttachment>>
  reporting?: <<WatcherReportingEmailAttachment>>
  data?: <<WatcherDataEmailAttachment>>
}
----


[discrete]
[[WatcherEmailBody]]
=== WatcherEmailBody

[source,ts,subs=+macros]
----
interface WatcherEmailBody {
  html?: string
  text?: string
}
----


[discrete]
[[WatcherEmailPriority]]
=== WatcherEmailPriority

[source,ts,subs=+macros]
----
type WatcherEmailPriority = 'lowest' | 'low' | 'normal' | 'high' | 'highest'
----


[discrete]
[[WatcherEmailResult]]
=== WatcherEmailResult

[source,ts,subs=+macros]
----
interface WatcherEmailResult {
  account?: string
  message: <<WatcherEmail>>
  reason?: string
}
----


[discrete]
[[WatcherExecutionPhase]]
=== WatcherExecutionPhase

[source,ts,subs=+macros]
----
type WatcherExecutionPhase = 'awaits_execution' | 'started' | 'input' | 'condition' | 'actions' | 'watch_transform' | 'aborted' | 'finished'
----


[discrete]
[[WatcherExecutionResult]]
=== WatcherExecutionResult

[source,ts,subs=+macros]
----
interface WatcherExecutionResult {
  actions: <<WatcherExecutionResultAction>>[]
  condition: <<WatcherExecutionResultCondition>>
  execution_duration: <<DurationValue>><<<UnitMillis>>>
  execution_time: <<DateTime>>
  input: <<WatcherExecutionResultInput>>
}
----


[discrete]
[[WatcherExecutionResultAction]]
=== WatcherExecutionResultAction

[source,ts,subs=+macros]
----
interface WatcherExecutionResultAction {
  email?: <<WatcherEmailResult>>
  id: <<Id>>
  index?: <<WatcherIndexResult>>
  logging?: <<WatcherLoggingResult>>
  pagerduty?: <<WatcherPagerDutyResult>>
  reason?: string
  slack?: <<WatcherSlackResult>>
  status: <<WatcherActionStatusOptions>>
  type: <<WatcherActionType>>
  webhook?: <<WatcherWebhookResult>>
  error?: <<ErrorCause>>
}
----


[discrete]
[[WatcherExecutionResultCondition]]
=== WatcherExecutionResultCondition

[source,ts,subs=+macros]
----
interface WatcherExecutionResultCondition {
  met: boolean
  status: <<WatcherActionStatusOptions>>
  type: <<WatcherConditionType>>
}
----


[discrete]
[[WatcherExecutionResultInput]]
=== WatcherExecutionResultInput

[source,ts,subs=+macros]
----
interface WatcherExecutionResultInput {
  payload: Record<string, any>
  status: <<WatcherActionStatusOptions>>
  type: <<WatcherInputType>>
}
----


[discrete]
[[WatcherExecutionState]]
=== WatcherExecutionState

[source,ts,subs=+macros]
----
interface WatcherExecutionState {
  successful: boolean
  timestamp: <<DateTime>>
  reason?: string
}
----


[discrete]
[[WatcherExecutionStatus]]
=== WatcherExecutionStatus

[source,ts,subs=+macros]
----
type WatcherExecutionStatus = 'awaits_execution' | 'checking' | 'execution_not_needed' | 'throttled' | 'executed' | 'failed' | 'deleted_while_queued' | 'not_executed_already_queued'
----


[discrete]
[[WatcherExecutionThreadPool]]
=== WatcherExecutionThreadPool

[source,ts,subs=+macros]
----
interface WatcherExecutionThreadPool {
  max_size: <<long>>
  queue_size: <<long>>
}
----


[discrete]
[[WatcherHourAndMinute]]
=== WatcherHourAndMinute

[source,ts,subs=+macros]
----
interface WatcherHourAndMinute {
  hour: <<integer>>[]
  minute: <<integer>>[]
}
----


[discrete]
[[WatcherHourlySchedule]]
=== WatcherHourlySchedule

[source,ts,subs=+macros]
----
interface WatcherHourlySchedule {
  minute: <<integer>>[]
}
----


[discrete]
[[WatcherHttpEmailAttachment]]
=== WatcherHttpEmailAttachment

[source,ts,subs=+macros]
----
interface WatcherHttpEmailAttachment {
  content_type?: string
  inline?: boolean
  request?: <<WatcherHttpInputRequestDefinition>>
}
----


[discrete]
[[WatcherHttpInput]]
=== WatcherHttpInput

[source,ts,subs=+macros]
----
interface WatcherHttpInput {
  extract?: string[]
  request?: <<WatcherHttpInputRequestDefinition>>
  response_content_type?: <<WatcherResponseContentType>>
}
----


[discrete]
[[WatcherHttpInputAuthentication]]
=== WatcherHttpInputAuthentication

[source,ts,subs=+macros]
----
interface WatcherHttpInputAuthentication {
  basic: <<WatcherHttpInputBasicAuthentication>>
}
----


[discrete]
[[WatcherHttpInputBasicAuthentication]]
=== WatcherHttpInputBasicAuthentication

[source,ts,subs=+macros]
----
interface WatcherHttpInputBasicAuthentication {
  password: <<Password>>
  username: <<Username>>
}
----


[discrete]
[[WatcherHttpInputMethod]]
=== WatcherHttpInputMethod

[source,ts,subs=+macros]
----
type WatcherHttpInputMethod = 'head' | 'get' | 'post' | 'put' | 'delete'
----


[discrete]
[[WatcherHttpInputProxy]]
=== WatcherHttpInputProxy

[source,ts,subs=+macros]
----
interface WatcherHttpInputProxy {
  host: <<Host>>
  port: <<uint>>
}
----


[discrete]
[[WatcherHttpInputRequestDefinition]]
=== WatcherHttpInputRequestDefinition

[source,ts,subs=+macros]
----
interface WatcherHttpInputRequestDefinition {
  auth?: <<WatcherHttpInputAuthentication>>
  body?: string
  connection_timeout?: <<Duration>>
  headers?: Record<string, string>
  host?: <<Host>>
  method?: <<WatcherHttpInputMethod>>
  params?: Record<string, string>
  path?: string
  port?: <<uint>>
  proxy?: <<WatcherHttpInputProxy>>
  read_timeout?: <<Duration>>
  scheme?: <<WatcherConnectionScheme>>
  url?: string
}
----


[discrete]
[[WatcherHttpInputRequestResult]]
=== WatcherHttpInputRequestResult

[source,ts,subs=+macros]
----
interface WatcherHttpInputRequestResult extends <<WatcherHttpInputRequestDefinition>> {}
----


[discrete]
[[WatcherHttpInputResponseResult]]
=== WatcherHttpInputResponseResult

[source,ts,subs=+macros]
----
interface WatcherHttpInputResponseResult {
  body: string
  headers: <<HttpHeaders>>
  status: <<integer>>
}
----


[discrete]
[[WatcherIndexAction]]
=== WatcherIndexAction

[source,ts,subs=+macros]
----
interface WatcherIndexAction {
  index: <<IndexName>>
  doc_id?: <<Id>>
  refresh?: <<Refresh>>
  op_type?: <<OpType>>
  timeout?: <<Duration>>
  execution_time_field?: <<Field>>
}
----


[discrete]
[[WatcherIndexResult]]
=== WatcherIndexResult

[source,ts,subs=+macros]
----
interface WatcherIndexResult {
  response: <<WatcherIndexResultSummary>>
}
----


[discrete]
[[WatcherIndexResultSummary]]
=== WatcherIndexResultSummary

[source,ts,subs=+macros]
----
interface WatcherIndexResultSummary {
  created: boolean
  id: <<Id>>
  index: <<IndexName>>
  result: <<Result>>
  version: <<VersionNumber>>
}
----


[discrete]
[[WatcherInputContainer]]
=== WatcherInputContainer

[source,ts,subs=+macros]
----
interface WatcherInputContainer {
  chain?: <<WatcherChainInput>>
  http?: <<WatcherHttpInput>>
  search?: <<WatcherSearchInput>>
  simple?: Record<string, any>
}
----


[discrete]
[[WatcherInputType]]
=== WatcherInputType

[source,ts,subs=+macros]
----
type WatcherInputType = 'http' | 'search' | 'simple'
----


[discrete]
[[WatcherLoggingAction]]
=== WatcherLoggingAction

[source,ts,subs=+macros]
----
interface WatcherLoggingAction {
  level?: string
  text: string
  category?: string
}
----


[discrete]
[[WatcherLoggingResult]]
=== WatcherLoggingResult

[source,ts,subs=+macros]
----
interface WatcherLoggingResult {
  logged_text: string
}
----


[discrete]
[[WatcherMonth]]
=== WatcherMonth

[source,ts,subs=+macros]
----
type WatcherMonth = 'january' | 'february' | 'march' | 'april' | 'may' | 'june' | 'july' | 'august' | 'september' | 'october' | 'november' | 'december'
----


[discrete]
[[WatcherNeverCondition]]
=== WatcherNeverCondition

[source,ts,subs=+macros]
----
interface WatcherNeverCondition {}
----


[discrete]
[[WatcherPagerDutyAction]]
=== WatcherPagerDutyAction

[source,ts,subs=+macros]
----
interface WatcherPagerDutyAction extends <<WatcherPagerDutyEvent>> {}
----


[discrete]
[[WatcherPagerDutyContext]]
=== WatcherPagerDutyContext

[source,ts,subs=+macros]
----
interface WatcherPagerDutyContext {
  href?: string
  src?: string
  type: <<WatcherPagerDutyContextType>>
}
----


[discrete]
[[WatcherPagerDutyContextType]]
=== WatcherPagerDutyContextType

[source,ts,subs=+macros]
----
type WatcherPagerDutyContextType = 'link' | 'image'
----


[discrete]
[[WatcherPagerDutyEvent]]
=== WatcherPagerDutyEvent

[source,ts,subs=+macros]
----
interface WatcherPagerDutyEvent {
  account?: string
  attach_payload: boolean
  client?: string
  client_url?: string
  contexts?: <<WatcherPagerDutyContext>>[]
  context?: <<WatcherPagerDutyContext>>[]
  description: string
  event_type?: <<WatcherPagerDutyEventType>>
  incident_key: string
  proxy?: <<WatcherPagerDutyEventProxy>>
}
----


[discrete]
[[WatcherPagerDutyEventProxy]]
=== WatcherPagerDutyEventProxy

[source,ts,subs=+macros]
----
interface WatcherPagerDutyEventProxy {
  host?: <<Host>>
  port?: <<integer>>
}
----


[discrete]
[[WatcherPagerDutyEventType]]
=== WatcherPagerDutyEventType

[source,ts,subs=+macros]
----
type WatcherPagerDutyEventType = 'trigger' | 'resolve' | 'acknowledge'
----


[discrete]
[[WatcherPagerDutyResult]]
=== WatcherPagerDutyResult

[source,ts,subs=+macros]
----
interface WatcherPagerDutyResult {
  event: <<WatcherPagerDutyEvent>>
  reason?: string
  request?: <<WatcherHttpInputRequestResult>>
  response?: <<WatcherHttpInputResponseResult>>
}
----


[discrete]
[[WatcherQuantifier]]
=== WatcherQuantifier

[source,ts,subs=+macros]
----
type WatcherQuantifier = 'some' | 'all'
----


[discrete]
[[WatcherQueryWatch]]
=== WatcherQueryWatch

[source,ts,subs=+macros]
----
interface WatcherQueryWatch {
  _id: <<Id>>
  status?: <<WatcherWatchStatus>>
  watch?: <<WatcherWatch>>
  _primary_term?: <<integer>>
  _seq_no?: <<SequenceNumber>>
}
----


[discrete]
[[WatcherReportingEmailAttachment]]
=== WatcherReportingEmailAttachment

[source,ts,subs=+macros]
----
interface WatcherReportingEmailAttachment {
  url: string
  inline?: boolean
  retries?: <<integer>>
  interval?: <<Duration>>
  request?: <<WatcherHttpInputRequestDefinition>>
}
----


[discrete]
[[WatcherResponseContentType]]
=== WatcherResponseContentType

[source,ts,subs=+macros]
----
type WatcherResponseContentType = 'json' | 'yaml' | 'text'
----


[discrete]
[[WatcherScheduleContainer]]
=== WatcherScheduleContainer

[source,ts,subs=+macros]
----
interface WatcherScheduleContainer {
  timezone?: string
  cron?: <<WatcherCronExpression>>
  daily?: <<WatcherDailySchedule>>
  hourly?: <<WatcherHourlySchedule>>
  interval?: <<Duration>>
  monthly?: <<WatcherTimeOfMonth>> | <<WatcherTimeOfMonth>>[]
  weekly?: <<WatcherTimeOfWeek>> | <<WatcherTimeOfWeek>>[]
  yearly?: <<WatcherTimeOfYear>> | <<WatcherTimeOfYear>>[]
}
----


[discrete]
[[WatcherScheduleTimeOfDay]]
=== WatcherScheduleTimeOfDay

[source,ts,subs=+macros]
----
type WatcherScheduleTimeOfDay = string | <<WatcherHourAndMinute>>
----


[discrete]
[[WatcherScheduleTriggerEvent]]
=== WatcherScheduleTriggerEvent

[source,ts,subs=+macros]
----
interface WatcherScheduleTriggerEvent {
  scheduled_time: <<DateTime>>
  triggered_time?: <<DateTime>>
}
----


[discrete]
[[WatcherScriptCondition]]
=== WatcherScriptCondition

[source,ts,subs=+macros]
----
interface WatcherScriptCondition {
  lang?: string
  params?: Record<string, any>
  source?: string
  id?: string
}
----


[discrete]
[[WatcherSearchInput]]
=== WatcherSearchInput

[source,ts,subs=+macros]
----
interface WatcherSearchInput {
  extract?: string[]
  request: <<WatcherSearchInputRequestDefinition>>
  timeout?: <<Duration>>
}
----


[discrete]
[[WatcherSearchInputRequestBody]]
=== WatcherSearchInputRequestBody

[source,ts,subs=+macros]
----
interface WatcherSearchInputRequestBody {
  query: <<QueryDslQueryContainer>>
}
----


[discrete]
[[WatcherSearchInputRequestDefinition]]
=== WatcherSearchInputRequestDefinition

[source,ts,subs=+macros]
----
interface WatcherSearchInputRequestDefinition {
  body?: <<WatcherSearchInputRequestBody>>
  indices?: <<IndexName>>[]
  indices_options?: <<IndicesOptions>>
  search_type?: <<SearchType>>
  template?: <<WatcherSearchTemplateRequestBody>>
  rest_total_hits_as_int?: boolean
}
----


[discrete]
[[WatcherSearchTemplateRequestBody]]
=== WatcherSearchTemplateRequestBody

[source,ts,subs=+macros]
----
interface WatcherSearchTemplateRequestBody {
  explain?: boolean
  pass:[/**] @property id ID of the search template to use. If no source is specified, this parameter is required. */
  id?: <<Id>>
  params?: Record<string, any>
  profile?: boolean
  pass:[/**] @property source An inline search template. Supports the same parameters as the search API's request body. Also supports Mustache variables. If no id is specified, this parameter is required. */
  source?: string
}
----


[discrete]
[[WatcherSimulatedActions]]
=== WatcherSimulatedActions

[source,ts,subs=+macros]
----
interface WatcherSimulatedActions {
  actions: string[]
  all: <<WatcherSimulatedActions>>
  use_all: boolean
}
----


[discrete]
[[WatcherSlackAction]]
=== WatcherSlackAction

[source,ts,subs=+macros]
----
interface WatcherSlackAction {
  account?: string
  message: <<WatcherSlackMessage>>
}
----


[discrete]
[[WatcherSlackAttachment]]
=== WatcherSlackAttachment

[source,ts,subs=+macros]
----
interface WatcherSlackAttachment {
  author_icon?: string
  author_link?: string
  author_name: string
  color?: string
  fallback?: string
  fields?: <<WatcherSlackAttachmentField>>[]
  footer?: string
  footer_icon?: string
  image_url?: string
  pretext?: string
  text?: string
  thumb_url?: string
  title: string
  title_link?: string
  ts?: <<EpochTime>><<<UnitSeconds>>>
}
----


[discrete]
[[WatcherSlackAttachmentField]]
=== WatcherSlackAttachmentField

[source,ts,subs=+macros]
----
interface WatcherSlackAttachmentField {
  <<short>>: boolean
  title: string
  value: string
}
----


[discrete]
[[WatcherSlackDynamicAttachment]]
=== WatcherSlackDynamicAttachment

[source,ts,subs=+macros]
----
interface WatcherSlackDynamicAttachment {
  attachment_template: <<WatcherSlackAttachment>>
  list_path: string
}
----


[discrete]
[[WatcherSlackMessage]]
=== WatcherSlackMessage

[source,ts,subs=+macros]
----
interface WatcherSlackMessage {
  attachments: <<WatcherSlackAttachment>>[]
  dynamic_attachments?: <<WatcherSlackDynamicAttachment>>
  from: string
  icon?: string
  text: string
  to: string[]
}
----


[discrete]
[[WatcherSlackResult]]
=== WatcherSlackResult

[source,ts,subs=+macros]
----
interface WatcherSlackResult {
  account?: string
  message: <<WatcherSlackMessage>>
}
----


[discrete]
[[WatcherThrottleState]]
=== WatcherThrottleState

[source,ts,subs=+macros]
----
interface WatcherThrottleState {
  reason: string
  timestamp: <<DateTime>>
}
----


[discrete]
[[WatcherTimeOfMonth]]
=== WatcherTimeOfMonth

[source,ts,subs=+macros]
----
interface WatcherTimeOfMonth {
  at: string[]
  on: <<integer>>[]
}
----


[discrete]
[[WatcherTimeOfWeek]]
=== WatcherTimeOfWeek

[source,ts,subs=+macros]
----
interface WatcherTimeOfWeek {
  at: string[]
  on: <<WatcherDay>>[]
}
----


[discrete]
[[WatcherTimeOfYear]]
=== WatcherTimeOfYear

[source,ts,subs=+macros]
----
interface WatcherTimeOfYear {
  at: string[]
  int: <<WatcherMonth>>[]
  on: <<integer>>[]
}
----


[discrete]
[[WatcherTriggerContainer]]
=== WatcherTriggerContainer

[source,ts,subs=+macros]
----
interface WatcherTriggerContainer {
  schedule?: <<WatcherScheduleContainer>>
}
----


[discrete]
[[WatcherTriggerEventContainer]]
=== WatcherTriggerEventContainer

[source,ts,subs=+macros]
----
interface WatcherTriggerEventContainer {
  schedule?: <<WatcherScheduleTriggerEvent>>
}
----


[discrete]
[[WatcherTriggerEventResult]]
=== WatcherTriggerEventResult

[source,ts,subs=+macros]
----
interface WatcherTriggerEventResult {
  manual: <<WatcherTriggerEventContainer>>
  triggered_time: <<DateTime>>
  type: string
}
----


[discrete]
[[WatcherWatch]]
=== WatcherWatch

[source,ts,subs=+macros]
----
interface WatcherWatch {
  actions: Record<<<IndexName>>, <<WatcherAction>>>
  condition: <<WatcherConditionContainer>>
  input: <<WatcherInputContainer>>
  metadata?: <<Metadata>>
  status?: <<WatcherWatchStatus>>
  throttle_period?: <<Duration>>
  throttle_period_in_millis?: <<DurationValue>><<<UnitMillis>>>
  transform?: <<TransformContainer>>
  trigger: <<WatcherTriggerContainer>>
}
----


[discrete]
[[WatcherWatchStatus]]
=== WatcherWatchStatus

[source,ts,subs=+macros]
----
interface WatcherWatchStatus {
  actions: <<WatcherActions>>
  last_checked?: <<DateTime>>
  last_met_condition?: <<DateTime>>
  state: <<WatcherActivationState>>
  version: <<VersionNumber>>
  execution_state?: string
}
----


[discrete]
[[WatcherWebhookAction]]
=== WatcherWebhookAction

[source,ts,subs=+macros]
----
interface WatcherWebhookAction extends <<WatcherHttpInputRequestDefinition>> {}
----


[discrete]
[[WatcherWebhookResult]]
=== WatcherWebhookResult

[source,ts,subs=+macros]
----
interface WatcherWebhookResult {
  request: <<WatcherHttpInputRequestResult>>
  response?: <<WatcherHttpInputResponseResult>>
}
----


