[[reference-shared-types-rollup-types]]

=== `Rollup` types

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[RollupDateHistogramGrouping]]
=== RollupDateHistogramGrouping

[source,ts,subs=+macros]
----
interface RollupDateHistogramGrouping {
  pass:[/**] @property delay How <<long>> to wait before rolling up new documents. By default, the indexer attempts to roll up all data that is available. However, it is not uncommon for data to arrive out of order. The indexer is unable to deal with data that arrives after a time-span has been rolled up. You need to specify a delay that matches the longest period of time you expect out-of-order data to arrive. */
  delay?: <<Duration>>
  pass:[/**] @property field The date field that is to be rolled up. */
  field: <<Field>>
  format?: string
  interval?: <<Duration>>
  pass:[/**] @property calendar_interval The interval of time buckets to be generated when rolling up. */
  calendar_interval?: <<Duration>>
  pass:[/**] @property fixed_interval The interval of time buckets to be generated when rolling up. */
  fixed_interval?: <<Duration>>
  pass:[/**] @property time_zone Defines what `time_zone` the rollup documents are stored as. Unlike raw data, which can shift timezones on the fly, rolled documents have to be stored with a specific timezone. By default, rollup documents are stored in `UTC`. */
  time_zone?: <<TimeZone>>
}
----


[discrete]
[[RollupFieldMetric]]
=== RollupFieldMetric

[source,ts,subs=+macros]
----
interface RollupFieldMetric {
  pass:[/**] @property field The field to collect metrics for. This must be a numeric of some kind. */
  field: <<Field>>
  pass:[/**] @property metrics An array of metrics to collect for the field. At least one metric must be configured. */
  metrics: <<RollupMetric>>[]
}
----


[discrete]
[[RollupGroupings]]
=== RollupGroupings

[source,ts,subs=+macros]
----
interface RollupGroupings {
  pass:[/**] @property date_histogram A date histogram group aggregates a date field into time-based buckets. This group is mandatory; you currently cannot roll up documents without a timestamp and a `date_histogram` group. */
  date_histogram?: <<RollupDateHistogramGrouping>>
  pass:[/**] @property histogram The histogram group aggregates one or more numeric fields into numeric histogram intervals. */
  histogram?: <<RollupHistogramGrouping>>
  pass:[/**] @property terms The terms group can be used on keyword or numeric fields to allow bucketing via the terms aggregation at a later point. The indexer enumerates and stores all values of a field for each time-period. This can be potentially costly for high-cardinality groups such as IP addresses, especially if the time-bucket is particularly sparse. */
  terms?: <<RollupTermsGrouping>>
}
----


[discrete]
[[RollupHistogramGrouping]]
=== RollupHistogramGrouping

[source,ts,subs=+macros]
----
interface RollupHistogramGrouping {
  pass:[/**] @property fields The set of fields that you wish to build histograms for. All fields specified must be some kind of numeric. Order does not matter. */
  fields: <<Fields>>
  pass:[/**] @property interval The interval of histogram buckets to be generated when rolling up. For example, a value of `5` creates buckets that are five units wide (`0-5`, `5-10`, etc). Note that only one interval can be specified in the histogram group, meaning that all fields being grouped via the histogram must share the same interval. */
  interval: <<long>>
}
----


[discrete]
[[RollupMetric]]
=== RollupMetric

[source,ts,subs=+macros]
----
type RollupMetric = 'min' | 'max' | 'sum' | 'avg' | 'value_count'
----


[discrete]
[[RollupTermsGrouping]]
=== RollupTermsGrouping

[source,ts,subs=+macros]
----
interface RollupTermsGrouping {
  pass:[/**] @property fields The set of fields that you wish to collect terms for. This array can contain fields that are both keyword and numerics. Order does not matter. */
  fields: <<Fields>>
}
----


