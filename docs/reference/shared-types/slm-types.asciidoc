[[reference-shared-types-slm-types]]

=== `Slm` types

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[SlmConfiguration]]
=== SlmConfiguration

[source,ts,subs=+macros]
----
interface SlmConfiguration {
  pass:[/**] @property ignore_unavailable If false, the snapshot fails if any data stream or index in indices is missing or closed. If true, the snapshot ignores missing or closed data streams and indices. */
  ignore_unavailable?: boolean
  pass:[/**] @property indices A comma-separated list of data streams and indices to include in the snapshot. Multi-index syntax is supported. By default, a snapshot includes all data streams and indices in the cluster. If this argument is provided, the snapshot only includes the specified data streams and clusters. */
  indices?: <<Indices>>
  pass:[/**] @property include_global_state If true, the current global state is included in the snapshot. */
  include_global_state?: boolean
  pass:[/**] @property feature_states A list of feature states to be included in this snapshot. A list of features available for inclusion in the snapshot and their descriptions be can be retrieved using the get features API. Each feature state includes one or more system indices containing data necessary for the function of that feature. Providing an empty array will include no feature states in the snapshot, regardless of the value of include_global_state. By default, all available feature states will be included in the snapshot if include_global_state is true, or no feature states if include_global_state is false. */
  feature_states?: string[]
  pass:[/**] @property metadata Attaches arbitrary metadata to the snapshot, such as a record of who took the snapshot, why it was taken, or any other useful data. <<Metadata>> must be less than 1024 bytes. */
  metadata?: <<Metadata>>
  pass:[/**] @property partial If false, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available. */
  partial?: boolean
}
----


[discrete]
[[SlmInProgress]]
=== SlmInProgress

[source,ts,subs=+macros]
----
interface SlmInProgress {
  name: <<Name>>
  start_time_millis: <<EpochTime>><<<UnitMillis>>>
  state: string
  uuid: <<Uuid>>
}
----


[discrete]
[[SlmInvocation]]
=== SlmInvocation

[source,ts,subs=+macros]
----
interface SlmInvocation {
  snapshot_name: <<Name>>
  time: <<DateTime>>
}
----


[discrete]
[[SlmPolicy]]
=== SlmPolicy

[source,ts,subs=+macros]
----
interface SlmPolicy {
  config?: <<SlmConfiguration>>
  name: <<Name>>
  repository: string
  retention?: <<SlmRetention>>
  schedule: <<WatcherCronExpression>>
}
----


[discrete]
[[SlmRetention]]
=== SlmRetention

[source,ts,subs=+macros]
----
interface SlmRetention {
  pass:[/**] @property expire_after Time period after which a snapshot is considered expired and eligible for deletion. SLM deletes expired snapshots based on the slm.retention_schedule. */
  expire_after: <<Duration>>
  pass:[/**] @property max_count Maximum number of snapshots to retain, even if the snapshots have not yet expired. If the number of snapshots in the repository exceeds this limit, the policy retains the most recent snapshots and deletes older snapshots. */
  max_count: <<integer>>
  pass:[/**] @property min_count Minimum number of snapshots to retain, even if the snapshots have expired. */
  min_count: <<integer>>
}
----


[discrete]
[[SlmSnapshotLifecycle]]
=== SlmSnapshotLifecycle

[source,ts,subs=+macros]
----
interface SlmSnapshotLifecycle {
  in_progress?: <<SlmInProgress>>
  last_failure?: <<SlmInvocation>>
  last_success?: <<SlmInvocation>>
  modified_date?: <<DateTime>>
  modified_date_millis: <<EpochTime>><<<UnitMillis>>>
  next_execution?: <<DateTime>>
  next_execution_millis: <<EpochTime>><<<UnitMillis>>>
  policy: <<SlmPolicy>>
  version: <<VersionNumber>>
  stats: <<SlmStatistics>>
}
----


[discrete]
[[SlmStatistics]]
=== SlmStatistics

[source,ts,subs=+macros]
----
interface SlmStatistics {
  retention_deletion_time?: <<Duration>>
  retention_deletion_time_millis?: <<DurationValue>><<<UnitMillis>>>
  retention_failed?: <<long>>
  retention_runs?: <<long>>
  retention_timed_out?: <<long>>
  policy?: <<Id>>
  total_snapshots_deleted?: <<long>>
  snapshots_deleted?: <<long>>
  total_snapshot_deletion_failures?: <<long>>
  snapshot_deletion_failures?: <<long>>
  total_snapshots_failed?: <<long>>
  snapshots_failed?: <<long>>
  total_snapshots_taken?: <<long>>
  snapshots_taken?: <<long>>
}
----


