[[reference-shared-types-security-types]]

=== `Security` types

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[SecurityAccess]]
=== SecurityAccess

[source,ts,subs=+macros]
----
interface SecurityAccess {
  pass:[/**] @property replication A list of indices permission entries for cross-cluster replication. */
  replication?: <<SecurityReplicationAccess>>[]
  pass:[/**] @property search A list of indices permission entries for cross-cluster search. */
  search?: <<SecuritySearchAccess>>[]
}
----


[discrete]
[[SecurityApiKey]]
=== SecurityApiKey

[source,ts,subs=+macros]
----
interface SecurityApiKey {
  pass:[/**] @property id <<Id>> for the API key */
  id: <<Id>>
  pass:[/**] @property name <<Name>> of the API key. */
  name: <<Name>>
  pass:[/**] @property type The type of the API key (e.g. `rest` or `cross_cluster`). */
  type: <<SecurityApiKeyType>>
  pass:[/**] @property creation Creation time for the API key in milliseconds. */
  creation: <<EpochTime>><<<UnitMillis>>>
  pass:[/**] @property expiration Expiration time for the API key in milliseconds. */
  expiration?: <<EpochTime>><<<UnitMillis>>>
  pass:[/**] @property invalidated Invalidation status for the API key. If the key has been invalidated, it has a value of `true`. Otherwise, it is `false`. */
  invalidated: boolean
  pass:[/**] @property invalidation If the key has been invalidated, invalidation time in milliseconds. */
  invalidation?: <<EpochTime>><<<UnitMillis>>>
  pass:[/**] @property username Principal for which this API key was created */
  username: <<Username>>
  pass:[/**] @property realm Realm name of the principal for which this API key was created. */
  realm: string
  pass:[/**] @property realm_type Realm type of the principal for which this API key was created */
  realm_type?: string
  pass:[/**] @property metadata <<Metadata>> of the API key */
  metadata: <<Metadata>>
  pass:[/**] @property role_descriptors The role descriptors assigned to this API key when it was created or last updated. An empty role descriptor means the API key inherits the owner user’s permissions. */
  role_descriptors?: Record<string, <<SecurityRoleDescriptor>>>
  pass:[/**] @property limited_by The owner user’s permissions associated with the API key. It is a point-in-time snapshot captured at creation and subsequent updates. An API key’s effective permissions are an intersection of its assigned privileges and the owner user’s permissions. */
  limited_by?: Record<string, <<SecurityRoleDescriptor>>>[]
  pass:[/**] @property access The access granted to cross-cluster API keys. The access is composed of permissions for cross cluster search and cross cluster replication. At least one of them must be specified. When specified, the new access assignment fully replaces the previously assigned access. */
  access?: <<SecurityAccess>>
  pass:[/**] @property profile_uid The profile uid for the API key owner principal, if requested and if it exists */
  profile_uid?: string
  pass:[/**] @property _sort Sorting values when using the `sort` parameter with the `security.query_api_keys` API. */
  _sort?: <<SortResults>>
}
----


[discrete]
[[SecurityApiKeyType]]
=== SecurityApiKeyType

[source,ts,subs=+macros]
----
type SecurityApiKeyType = 'rest' | 'cross_cluster'
----


[discrete]
[[SecurityApplicationGlobalUserPrivileges]]
=== SecurityApplicationGlobalUserPrivileges

[source,ts,subs=+macros]
----
interface SecurityApplicationGlobalUserPrivileges {
  manage: <<SecurityManageUserPrivileges>>
}
----


[discrete]
[[SecurityApplicationPrivileges]]
=== SecurityApplicationPrivileges

[source,ts,subs=+macros]
----
interface SecurityApplicationPrivileges {
  pass:[/**] @property application The name of the application to which this entry applies. */
  application: string
  pass:[/**] @property privileges A list of strings, where each element is the name of an application privilege or action. */
  privileges: string[]
  pass:[/**] @property resources A list resources to which the privileges are applied. */
  resources: string[]
}
----


[discrete]
[[SecurityBulkError]]
=== SecurityBulkError

[source,ts,subs=+macros]
----
interface SecurityBulkError {
  pass:[/**] @property count The number of errors */
  count: <<integer>>
  pass:[/**] @property details Details about the errors, keyed by role name */
  details: Record<string, <<ErrorCause>>>
}
----


[discrete]
[[SecurityClusterNode]]
=== SecurityClusterNode

[source,ts,subs=+macros]
----
interface SecurityClusterNode {
  name: <<Name>>
}
----


[discrete]
[[SecurityClusterPrivilege]]
=== SecurityClusterPrivilege

[source,ts,subs=+macros]
----
type SecurityClusterPrivilege = 'all' | 'cancel_task' | 'create_snapshot' | 'cross_cluster_replication' | 'cross_cluster_search' | 'delegate_pki' | 'grant_api_key' | 'manage' | 'manage_api_key' | 'manage_autoscaling' | 'manage_behavioral_analytics' | 'manage_ccr' | 'manage_data_frame_transforms' | 'manage_data_stream_global_retention' | 'manage_enrich' | 'manage_ilm' | 'manage_index_templates' | 'manage_inference' | 'manage_ingest_pipelines' | 'manage_logstash_pipelines' | 'manage_ml' | 'manage_oidc' | 'manage_own_api_key' | 'manage_pipeline' | 'manage_rollup' | 'manage_saml' | 'manage_search_application' | 'manage_search_query_rules' | 'manage_search_synonyms' | 'manage_security' | 'manage_service_account' | 'manage_slm' | 'manage_token' | 'manage_transform' | 'manage_user_profile' | 'manage_watcher' | 'monitor' | 'monitor_data_frame_transforms' | 'monitor_data_stream_global_retention' | 'monitor_enrich' | 'monitor_inference' | 'monitor_ml' | 'monitor_rollup' | 'monitor_snapshot' | 'monitor_stats' | 'monitor_text_structure' | 'monitor_transform' | 'monitor_watcher' | 'none' | 'post_behavioral_analytics_event' | 'read_ccr' | 'read_fleet_secrets' | 'read_ilm' | 'read_pipeline' | 'read_security' | 'read_slm' | 'transport_client' | 'write_connector_secrets' | 'write_fleet_secrets' | string
----


[discrete]
[[SecurityCreatedStatus]]
=== SecurityCreatedStatus

[source,ts,subs=+macros]
----
interface SecurityCreatedStatus {
  created: boolean
}
----


[discrete]
[[SecurityFieldRule]]
=== SecurityFieldRule

[source,ts,subs=+macros]
----
interface SecurityFieldRule {
  username?: <<Names>>
  dn?: <<Names>>
  groups?: <<Names>>
}
----


[discrete]
[[SecurityFieldSecurity]]
=== SecurityFieldSecurity

[source,ts,subs=+macros]
----
interface SecurityFieldSecurity {
  except?: <<Fields>>
  grant?: <<Fields>>
}
----


[discrete]
[[SecurityGlobalPrivilege]]
=== SecurityGlobalPrivilege

[source,ts,subs=+macros]
----
interface SecurityGlobalPrivilege {
  application: <<SecurityApplicationGlobalUserPrivileges>>
}
----


[discrete]
[[SecurityGrantType]]
=== SecurityGrantType

[source,ts,subs=+macros]
----
type SecurityGrantType = 'password' | 'access_token'
----


[discrete]
[[SecurityIndexPrivilege]]
=== SecurityIndexPrivilege

[source,ts,subs=+macros]
----
type SecurityIndexPrivilege = 'all' | 'auto_configure' | 'create' | 'create_doc' | 'create_index' | 'cross_cluster_replication' | 'cross_cluster_replication_internal' | 'delete' | 'delete_index' | 'index' | 'maintenance' | 'manage' | 'manage_data_stream_lifecycle' | 'manage_follow_index' | 'manage_ilm' | 'manage_leader_index' | 'monitor' | 'none' | 'read' | 'read_cross_cluster' | 'view_index_metadata' | 'write' | string
----


[discrete]
[[SecurityIndicesPrivileges]]
=== SecurityIndicesPrivileges

[source,ts,subs=+macros]
----
interface SecurityIndicesPrivileges {
  pass:[/**] @property field_security The document fields that the owners of the role have read access to. */
  field_security?: <<SecurityFieldSecurity>>
  pass:[/**] @property names A list of indices (or index name patterns) to which the permissions in this entry apply. */
  names: <<IndexName>> | <<IndexName>>[]
  pass:[/**] @property privileges The index level privileges that owners of the role have on the specified indices. */
  privileges: <<SecurityIndexPrivilege>>[]
  pass:[/**] @property query A search query that defines the documents the owners of the role have access to. A document within the specified indices must match this query for it to be accessible by the owners of the role. */
  query?: <<SecurityIndicesPrivilegesQuery>>
  pass:[/**] @property allow_restricted_indices Set to `true` if using wildcard or regular expressions for patterns that cover restricted indices. Implicitly, restricted indices have limited privileges that can cause pattern tests to fail. If restricted indices are explicitly included in the `names` list, Elasticsearch checks privileges against these indices regardless of the value set for `allow_restricted_indices`. */
  allow_restricted_indices?: boolean
}
----


[discrete]
[[SecurityIndicesPrivilegesQuery]]
=== SecurityIndicesPrivilegesQuery

[source,ts,subs=+macros]
----
type SecurityIndicesPrivilegesQuery = string | <<QueryDslQueryContainer>> | <<SecurityRoleTemplateQuery>>
----


[discrete]
[[SecurityManageUserPrivileges]]
=== SecurityManageUserPrivileges

[source,ts,subs=+macros]
----
interface SecurityManageUserPrivileges {
  applications: string[]
}
----


[discrete]
[[SecurityRealmInfo]]
=== SecurityRealmInfo

[source,ts,subs=+macros]
----
interface SecurityRealmInfo {
  name: <<Name>>
  type: string
}
----


[discrete]
[[SecurityRemoteClusterPrivilege]]
=== SecurityRemoteClusterPrivilege

[source,ts,subs=+macros]
----
type SecurityRemoteClusterPrivilege = 'monitor_enrich' | 'monitor_stats'
----


[discrete]
[[SecurityRemoteClusterPrivileges]]
=== SecurityRemoteClusterPrivileges

[source,ts,subs=+macros]
----
interface SecurityRemoteClusterPrivileges {
  pass:[/**] @property clusters A list of cluster aliases to which the permissions in this entry apply. */
  clusters: <<Names>>
  pass:[/**] @property privileges The cluster level privileges that owners of the role have on the remote cluster. */
  privileges: <<SecurityRemoteClusterPrivilege>>[]
}
----


[discrete]
[[SecurityRemoteIndicesPrivileges]]
=== SecurityRemoteIndicesPrivileges

[source,ts,subs=+macros]
----
interface SecurityRemoteIndicesPrivileges {
  pass:[/**] @property clusters A list of cluster aliases to which the permissions in this entry apply. */
  clusters: <<Names>>
  pass:[/**] @property field_security The document fields that the owners of the role have read access to. */
  field_security?: <<SecurityFieldSecurity>>
  pass:[/**] @property names A list of indices (or index name patterns) to which the permissions in this entry apply. */
  names: <<IndexName>> | <<IndexName>>[]
  pass:[/**] @property privileges The index level privileges that owners of the role have on the specified indices. */
  privileges: <<SecurityIndexPrivilege>>[]
  pass:[/**] @property query A search query that defines the documents the owners of the role have access to. A document within the specified indices must match this query for it to be accessible by the owners of the role. */
  query?: <<SecurityIndicesPrivilegesQuery>>
  pass:[/**] @property allow_restricted_indices Set to `true` if using wildcard or regular expressions for patterns that cover restricted indices. Implicitly, restricted indices have limited privileges that can cause pattern tests to fail. If restricted indices are explicitly included in the `names` list, Elasticsearch checks privileges against these indices regardless of the value set for `allow_restricted_indices`. */
  allow_restricted_indices?: boolean
}
----


[discrete]
[[SecurityReplicationAccess]]
=== SecurityReplicationAccess

[source,ts,subs=+macros]
----
interface SecurityReplicationAccess {
  pass:[/**] @property names A list of indices (or index name patterns) to which the permissions in this entry apply. */
  names: <<IndexName>> | <<IndexName>>[]
  pass:[/**] @property allow_restricted_indices This needs to be set to true if the patterns in the names field should cover system indices. */
  allow_restricted_indices?: boolean
}
----


[discrete]
[[SecurityRestriction]]
=== SecurityRestriction

[source,ts,subs=+macros]
----
interface SecurityRestriction {
  workflows: <<SecurityRestrictionWorkflow>>[]
}
----


[discrete]
[[SecurityRestrictionWorkflow]]
=== SecurityRestrictionWorkflow

[source,ts,subs=+macros]
----
type SecurityRestrictionWorkflow = 'search_application_query' | string
----


[discrete]
[[SecurityRoleDescriptor]]
=== SecurityRoleDescriptor

[source,ts,subs=+macros]
----
interface SecurityRoleDescriptor {
  pass:[/**] @property cluster A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute. */
  cluster?: <<SecurityClusterPrivilege>>[]
  pass:[/**] @property indices A list of indices permissions entries. */
  indices?: <<SecurityIndicesPrivileges>>[]
  pass:[/**] @property index A list of indices permissions entries. */
  index?: <<SecurityIndicesPrivileges>>[]
  pass:[/**] @property remote_indices A list of indices permissions for remote clusters. */
  remote_indices?: <<SecurityRemoteIndicesPrivileges>>[]
  pass:[/**] @property remote_cluster A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions. */
  remote_cluster?: <<SecurityRemoteClusterPrivileges>>[]
  pass:[/**] @property global An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges. */
  global?: <<SecurityGlobalPrivilege>>[] | <<SecurityGlobalPrivilege>>
  pass:[/**] @property applications A list of application privilege entries */
  applications?: <<SecurityApplicationPrivileges>>[]
  pass:[/**] @property metadata Optional meta-data. Within the metadata object, keys that begin with `_` are reserved for system usage. */
  metadata?: <<Metadata>>
  pass:[/**] @property run_as A list of users that the API keys can impersonate. *Note*: in Serverless, the run-as feature is disabled. For API compatibility, you can still specify an empty `run_as` field, but a non-empty list will be rejected. */
  run_as?: string[]
  pass:[/**] @property description Optional description of the role descriptor */
  description?: string
  pass:[/**] @property restriction Restriction for when the role descriptor is allowed to be effective. */
  restriction?: <<SecurityRestriction>>
  transient_metadata?: Record<string, any>
}
----


[discrete]
[[SecurityRoleDescriptorRead]]
=== SecurityRoleDescriptorRead

[source,ts,subs=+macros]
----
interface SecurityRoleDescriptorRead {
  pass:[/**] @property cluster A list of cluster privileges. These privileges define the cluster level actions that API keys are able to execute. */
  cluster: <<SecurityClusterPrivilege>>[]
  pass:[/**] @property indices A list of indices permissions entries. */
  indices: <<SecurityIndicesPrivileges>>[]
  pass:[/**] @property index A list of indices permissions entries. */
  index: <<SecurityIndicesPrivileges>>[]
  pass:[/**] @property remote_indices A list of indices permissions for remote clusters. */
  remote_indices?: <<SecurityRemoteIndicesPrivileges>>[]
  pass:[/**] @property remote_cluster A list of cluster permissions for remote clusters. Note - this is limited a subset of the cluster permissions. */
  remote_cluster?: <<SecurityRemoteClusterPrivileges>>[]
  pass:[/**] @property global An object defining global privileges. A global privilege is a form of cluster privilege that is request-aware. Support for global privileges is currently limited to the management of application privileges. */
  global?: <<SecurityGlobalPrivilege>>[] | <<SecurityGlobalPrivilege>>
  pass:[/**] @property applications A list of application privilege entries */
  applications?: <<SecurityApplicationPrivileges>>[]
  pass:[/**] @property metadata Optional meta-data. Within the metadata object, keys that begin with `_` are reserved for system usage. */
  metadata?: <<Metadata>>
  pass:[/**] @property run_as A list of users that the API keys can impersonate. */
  run_as?: string[]
  pass:[/**] @property description Optional description of the role descriptor */
  description?: string
  pass:[/**] @property restriction Restriction for when the role descriptor is allowed to be effective. */
  restriction?: <<SecurityRestriction>>
  transient_metadata?: Record<string, any>
}
----


[discrete]
[[SecurityRoleMapping]]
=== SecurityRoleMapping

[source,ts,subs=+macros]
----
interface SecurityRoleMapping {
  enabled: boolean
  metadata: <<Metadata>>
  roles?: string[]
  role_templates?: <<SecurityRoleTemplate>>[]
  rules: <<SecurityRoleMappingRule>>
}
----


[discrete]
[[SecurityRoleMappingRule]]
=== SecurityRoleMappingRule

[source,ts,subs=+macros]
----
interface SecurityRoleMappingRule {
  any?: <<SecurityRoleMappingRule>>[]
  all?: <<SecurityRoleMappingRule>>[]
  field?: <<SecurityFieldRule>>
  except?: <<SecurityRoleMappingRule>>
}
----


[discrete]
[[SecurityRoleTemplate]]
=== SecurityRoleTemplate

[source,ts,subs=+macros]
----
interface SecurityRoleTemplate {
  format?: <<SecurityTemplateFormat>>
  template: <<Script>> | string
}
----


[discrete]
[[SecurityRoleTemplateInlineQuery]]
=== SecurityRoleTemplateInlineQuery

[source,ts,subs=+macros]
----
type SecurityRoleTemplateInlineQuery = string | <<QueryDslQueryContainer>>
----


[discrete]
[[SecurityRoleTemplateQuery]]
=== SecurityRoleTemplateQuery

[source,ts,subs=+macros]
----
interface SecurityRoleTemplateQuery {
  pass:[/**] @property template When you create a role, you can specify a query that defines the document level security permissions. You can optionally use Mustache templates in the role query to insert the username of the current authenticated user into the role. Like other places in Elasticsearch that support templating or scripting, you can specify inline, stored, or file-based templates and define custom parameters. You access the details for the current authenticated user through the _user parameter. */
  template?: <<SecurityRoleTemplateScript>> | <<SecurityRoleTemplateInlineQuery>>
}
----


[discrete]
[[SecurityRoleTemplateScript]]
=== SecurityRoleTemplateScript

[source,ts,subs=+macros]
----
interface SecurityRoleTemplateScript {
  source?: <<SecurityRoleTemplateInlineQuery>>
  pass:[/**] @property id The `id` for a stored script. */
  id?: <<Id>>
  pass:[/**] @property params Specifies any named parameters that are passed into the script as variables. Use parameters instead of hard-coded values to decrease compile time. */
  params?: Record<string, any>
  pass:[/**] @property lang Specifies the language the script is written in. */
  lang?: <<ScriptLanguage>>
  options?: Record<string, string>
}
----


[discrete]
[[SecuritySearchAccess]]
=== SecuritySearchAccess

[source,ts,subs=+macros]
----
interface SecuritySearchAccess {
  pass:[/**] @property field_security The document fields that the owners of the role have read access to. */
  field_security?: <<SecurityFieldSecurity>>
  pass:[/**] @property names A list of indices (or index name patterns) to which the permissions in this entry apply. */
  names: <<IndexName>> | <<IndexName>>[]
  pass:[/**] @property query A search query that defines the documents the owners of the role have access to. A document within the specified indices must match this query for it to be accessible by the owners of the role. */
  query?: <<SecurityIndicesPrivilegesQuery>>
  pass:[/**] @property allow_restricted_indices Set to `true` if using wildcard or regular expressions for patterns that cover restricted indices. Implicitly, restricted indices have limited privileges that can cause pattern tests to fail. If restricted indices are explicitly included in the `names` list, Elasticsearch checks privileges against these indices regardless of the value set for `allow_restricted_indices`. */
  allow_restricted_indices?: boolean
}
----


[discrete]
[[SecurityTemplateFormat]]
=== SecurityTemplateFormat

[source,ts,subs=+macros]
----
type SecurityTemplateFormat = 'string' | 'json'
----


[discrete]
[[SecurityUser]]
=== SecurityUser

[source,ts,subs=+macros]
----
interface SecurityUser {
  email?: string | null
  full_name?: <<Name>> | null
  metadata: <<Metadata>>
  roles: string[]
  username: <<Username>>
  enabled: boolean
  profile_uid?: <<SecurityUserProfileId>>
}
----


[discrete]
[[SecurityUserIndicesPrivileges]]
=== SecurityUserIndicesPrivileges

[source,ts,subs=+macros]
----
interface SecurityUserIndicesPrivileges {
  pass:[/**] @property field_security The document fields that the owners of the role have read access to. */
  field_security?: <<SecurityFieldSecurity>>[]
  pass:[/**] @property names A list of indices (or index name patterns) to which the permissions in this entry apply. */
  names: <<IndexName>> | <<IndexName>>[]
  pass:[/**] @property privileges The index level privileges that owners of the role have on the specified indices. */
  privileges: <<SecurityIndexPrivilege>>[]
  pass:[/**] @property query Search queries that define the documents the user has access to. A document within the specified indices must match these queries for it to be accessible by the owners of the role. */
  query?: <<SecurityIndicesPrivilegesQuery>>[]
  pass:[/**] @property allow_restricted_indices Set to `true` if using wildcard or regular expressions for patterns that cover restricted indices. Implicitly, restricted indices have limited privileges that can cause pattern tests to fail. If restricted indices are explicitly included in the `names` list, Elasticsearch checks privileges against these indices regardless of the value set for `allow_restricted_indices`. */
  allow_restricted_indices: boolean
}
----


[discrete]
[[SecurityUserProfile]]
=== SecurityUserProfile

[source,ts,subs=+macros]
----
interface SecurityUserProfile {
  uid: <<SecurityUserProfileId>>
  user: <<SecurityUserProfileUser>>
  data: Record<string, any>
  labels: Record<string, any>
  enabled?: boolean
}
----


[discrete]
[[SecurityUserProfileHitMetadata]]
=== SecurityUserProfileHitMetadata

[source,ts,subs=+macros]
----
interface SecurityUserProfileHitMetadata {
  _primary_term: <<long>>
  _seq_no: <<SequenceNumber>>
}
----


[discrete]
[[SecurityUserProfileId]]
=== SecurityUserProfileId

[source,ts,subs=+macros]
----
type SecurityUserProfileId = string
----


[discrete]
[[SecurityUserProfileUser]]
=== SecurityUserProfileUser

[source,ts,subs=+macros]
----
interface SecurityUserProfileUser {
  email?: string | null
  full_name?: <<Name>> | null
  realm_name: <<Name>>
  realm_domain?: <<Name>>
  roles: string[]
  username: <<Username>>
}
----


[discrete]
[[SecurityUserProfileWithMetadata]]
=== SecurityUserProfileWithMetadata

[source,ts,subs=+macros]
----
interface SecurityUserProfileWithMetadata extends <<SecurityUserProfile>> {
  last_synchronized: <<long>>
  _doc: <<SecurityUserProfileHitMetadata>>
}
----


