[[reference-snapshot]]
== client.snapshot

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[client.snapshot.cleanupRepository]]
== `client.snapshot.cleanupRepository()`

Triggers the review of a snapshot repository’s contents and deletes any stale data not referenced by existing snapshots.

{ref}/clean-up-snapshot-repo-api.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotCleanupRepositoryRequest, options?: TransportRequestOptions) => Promise<SnapshotCleanupRepositoryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotCleanupRepositoryRequest extends <<RequestBase>> {
  name: <<Name>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotCleanupRepositoryResponse {
  results: SnapshotCleanupRepositoryCleanupRepositoryResults
}

----


[discrete]
[[client.snapshot.clone]]
== `client.snapshot.clone()`

Clones indices from one snapshot into another snapshot in the same repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotCloneRequest, options?: TransportRequestOptions) => Promise<SnapshotCloneResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotCloneRequest extends <<RequestBase>> {
  repository: <<Name>>
  snapshot: <<Name>>
  target_snapshot: <<Name>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
  indices: string
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SnapshotCloneResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.snapshot.create]]
== `client.snapshot.create()`

Creates a snapshot in a repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotCreateRequest, options?: TransportRequestOptions) => Promise<SnapshotCreateResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotCreateRequest extends <<RequestBase>> {
  repository: <<Name>>
  snapshot: <<Name>>
  master_timeout?: <<Duration>>
  wait_for_completion?: boolean
  ignore_unavailable?: boolean
  include_global_state?: boolean
  indices?: <<Indices>>
  feature_states?: string[]
  metadata?: <<Metadata>>
  partial?: boolean
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotCreateResponse {
  accepted?: boolean
  snapshot?: <<SnapshotSnapshotInfo>>
}

----


[discrete]
[[client.snapshot.createRepository]]
== `client.snapshot.createRepository()`

Creates a repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotCreateRepositoryRequest, options?: TransportRequestOptions) => Promise<SnapshotCreateRepositoryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotCreateRepositoryRequest extends <<RequestBase>> {
  name: <<Name>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
  verify?: boolean
  repository?: <<SnapshotRepository>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SnapshotCreateRepositoryResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.snapshot.delete]]
== `client.snapshot.delete()`

Deletes one or more snapshots.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotDeleteRequest, options?: TransportRequestOptions) => Promise<SnapshotDeleteResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotDeleteRequest extends <<RequestBase>> {
  repository: <<Name>>
  snapshot: <<Name>>
  master_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SnapshotDeleteResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.snapshot.deleteRepository]]
== `client.snapshot.deleteRepository()`

Deletes a repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotDeleteRepositoryRequest, options?: TransportRequestOptions) => Promise<SnapshotDeleteRepositoryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotDeleteRepositoryRequest extends <<RequestBase>> {
  name: <<Names>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SnapshotDeleteRepositoryResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.snapshot.get]]
== `client.snapshot.get()`

Returns information about a snapshot.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotGetRequest, options?: TransportRequestOptions) => Promise<SnapshotGetResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotGetRequest extends <<RequestBase>> {
  repository: <<Name>>
  snapshot: <<Names>>
  ignore_unavailable?: boolean
  master_timeout?: <<Duration>>
  verbose?: boolean
  index_details?: boolean
  index_names?: boolean
  include_repository?: boolean
  sort?: <<SnapshotSnapshotSort>>
  size?: <<integer>>
  order?: <<SortOrder>>
  after?: string
  offset?: <<integer>>
  from_sort_value?: string
  slm_policy_filter?: <<Name>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotGetResponse {
  responses?: SnapshotGetSnapshotResponseItem[]
  snapshots?: <<SnapshotSnapshotInfo>>[]
  total: <<integer>>
  remaining: <<integer>>
}

----


[discrete]
[[client.snapshot.getRepository]]
== `client.snapshot.getRepository()`

Returns information about a repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotGetRepositoryRequest, options?: TransportRequestOptions) => Promise<SnapshotGetRepositoryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotGetRepositoryRequest extends <<RequestBase>> {
  name?: <<Names>>
  local?: boolean
  master_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type SnapshotGetRepositoryResponse = Record<string, <<SnapshotRepository>>>

----


[discrete]
[[client.snapshot.repositoryAnalyze]]
== `client.snapshot.repositoryAnalyze()`

Analyzes a repository for correctness and performance

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotRepositoryAnalyzeRequest, options?: TransportRequestOptions) => Promise<SnapshotRepositoryAnalyzeResponse>
----

[discrete]
[[client.snapshot.restore]]
== `client.snapshot.restore()`

Restores a snapshot.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotRestoreRequest, options?: TransportRequestOptions) => Promise<SnapshotRestoreResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotRestoreRequest extends <<RequestBase>> {
  repository: <<Name>>
  snapshot: <<Name>>
  master_timeout?: <<Duration>>
  wait_for_completion?: boolean
  feature_states?: string[]
  ignore_index_settings?: string[]
  ignore_unavailable?: boolean
  include_aliases?: boolean
  include_global_state?: boolean
  index_settings?: <<IndicesIndexSettings>>
  indices?: <<Indices>>
  partial?: boolean
  rename_pattern?: string
  rename_replacement?: string
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotRestoreResponse {
  accepted?: boolean
  snapshot?: SnapshotRestoreSnapshotRestore
}

----


[discrete]
[[client.snapshot.status]]
== `client.snapshot.status()`

Returns information about the status of a snapshot.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotStatusRequest, options?: TransportRequestOptions) => Promise<SnapshotStatusResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotStatusRequest extends <<RequestBase>> {
  repository?: <<Name>>
  snapshot?: <<Names>>
  ignore_unavailable?: boolean
  master_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotStatusResponse {
  snapshots: <<SnapshotStatus>>[]
}

----


[discrete]
[[client.snapshot.verifyRepository]]
== `client.snapshot.verifyRepository()`

Verifies a repository.

{ref}/modules-snapshots.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: SnapshotVerifyRepositoryRequest, options?: TransportRequestOptions) => Promise<SnapshotVerifyRepositoryResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface SnapshotVerifyRepositoryRequest extends <<RequestBase>> {
  name: <<Name>>
  master_timeout?: <<Duration>>
  timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface SnapshotVerifyRepositoryResponse {
  nodes: Record<string, SnapshotVerifyRepositoryCompactNodeInfo>
}

----


