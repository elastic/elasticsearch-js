[[reference-async_search]]
== client.asyncSearch

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[client.asyncSearch.delete]]
== `client.asyncSearch.delete()`

Delete an async search. If the asynchronous search is still running, it is cancelled. Otherwise, the saved search results are deleted. If the Elasticsearch security features are enabled, the deletion of a specific async search is restricted to: the authenticated user that submitted the original search request; users that have the `cancel_task` cluster privilege.

{ref}/async-search.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: AsyncSearchDeleteRequest, options?: TransportRequestOptions) => Promise<AsyncSearchDeleteResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface AsyncSearchDeleteRequest extends <<RequestBase>> {
  id: <<Id>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type AsyncSearchDeleteResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.asyncSearch.get]]
== `client.asyncSearch.get()`

Get async search results. Retrieve the results of a previously submitted asynchronous search request. If the Elasticsearch security features are enabled, access to the results of a specific async search is restricted to the user or API key that submitted it.

{ref}/async-search.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: AsyncSearchGetRequest, options?: TransportRequestOptions) => Promise<AsyncSearchGetResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface AsyncSearchGetRequest extends <<RequestBase>> {
  id: <<Id>>
  keep_alive?: <<Duration>>
  typed_keys?: boolean
  wait_for_completion_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type AsyncSearchGetResponse<TDocument = unknown, TAggregations = Record<<<AggregateName>>, <<AggregationsAggregate>>>> = <<AsyncSearchAsyncSearchDocumentResponseBase>><TDocument, TAggregations>

----


[discrete]
[[client.asyncSearch.status]]
== `client.asyncSearch.status()`

Get the async search status. Get the status of a previously submitted async search request given its identifier, without retrieving search results. If the Elasticsearch security features are enabled, use of this API is restricted to the `monitoring_user` role.

{ref}/async-search.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: AsyncSearchStatusRequest, options?: TransportRequestOptions) => Promise<AsyncSearchStatusResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface AsyncSearchStatusRequest extends <<RequestBase>> {
  id: <<Id>>
  keep_alive?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type AsyncSearchStatusResponse = AsyncSearchStatusStatusResponseBase

----


[discrete]
[[client.asyncSearch.submit]]
== `client.asyncSearch.submit()`

Run an async search. When the primary sort of the results is an indexed field, shards get sorted based on minimum and maximum value that they hold for that field. Partial results become available following the sort criteria that was requested. Warning: Asynchronous search does not support scroll or search requests that include only the suggest section. By default, Elasticsearch does not allow you to store an async search response larger than 10Mb and an attempt to do this results in an error. The maximum allowed size for a stored async search response can be set by changing the `search.max_async_search_response_size` cluster level setting.

{ref}/async-search.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: AsyncSearchSubmitRequest, options?: TransportRequestOptions) => Promise<AsyncSearchSubmitResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface AsyncSearchSubmitRequest extends <<RequestBase>> {
  index?: <<Indices>>
  wait_for_completion_timeout?: <<Duration>>
  keep_on_completion?: boolean
  allow_no_indices?: boolean
  allow_partial_search_results?: boolean
  analyzer?: string
  analyze_wildcard?: boolean
  batched_reduce_size?: <<long>>
  ccs_minimize_roundtrips?: boolean
  default_operator?: <<QueryDslOperator>>
  df?: string
  expand_wildcards?: <<ExpandWildcards>>
  ignore_throttled?: boolean
  ignore_unavailable?: boolean
  lenient?: boolean
  max_concurrent_shard_requests?: <<long>>
  preference?: string
  request_cache?: boolean
  routing?: <<Routing>>
  search_type?: <<SearchType>>
  suggest_field?: <<Field>>
  suggest_mode?: <<SuggestMode>>
  suggest_size?: <<long>>
  suggest_text?: string
  typed_keys?: boolean
  rest_total_hits_as_int?: boolean
  _source_excludes?: <<Fields>>
  _source_includes?: <<Fields>>
  q?: string
  aggregations?: Record<string, <<AggregationsAggregationContainer>>>
  pass:[/**] @alias aggregations */
  aggs?: Record<string, <<AggregationsAggregationContainer>>>
  collapse?: <<SearchFieldCollapse>>
  explain?: boolean
  ext?: Record<string, any>
  from?: <<integer>>
  highlight?: <<SearchHighlight>>
  track_total_hits?: <<SearchTrackHits>>
  indices_boost?: Record<<<IndexName>>, <<double>>>[]
  docvalue_fields?: (<<QueryDslFieldAndFormat>> | <<Field>>)[]
  knn?: <<KnnSearch>> | <<KnnSearch>>[]
  min_score?: <<double>>
  post_filter?: <<QueryDslQueryContainer>>
  profile?: boolean
  query?: <<QueryDslQueryContainer>>
  rescore?: <<SearchRescore>> | <<SearchRescore>>[]
  script_fields?: Record<string, <<ScriptField>>>
  search_after?: <<SortResults>>
  size?: <<integer>>
  slice?: <<SlicedScroll>>
  sort?: <<Sort>>
  _source?: <<SearchSourceConfig>>
  fields?: (<<QueryDslFieldAndFormat>> | <<Field>>)[]
  suggest?: <<SearchSuggester>>
  terminate_after?: <<long>>
  timeout?: string
  track_scores?: boolean
  version?: boolean
  seq_no_primary_term?: boolean
  stored_fields?: <<Fields>>
  pit?: <<SearchPointInTimeReference>>
  runtime_mappings?: <<MappingRuntimeFields>>
  stats?: string[]
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type AsyncSearchSubmitResponse<TDocument = unknown, TAggregations = Record<<<AggregateName>>, <<AggregationsAggregate>>>> = <<AsyncSearchAsyncSearchDocumentResponseBase>><TDocument, TAggregations>

----


