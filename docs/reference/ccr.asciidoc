[[reference-ccr]]
== client.ccr

////////
===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in:                                      ||
||    https://github.com/elastic/elastic-client-generator-js                                                             ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       npm run elasticsearch -- --version <version>                                                                    ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================
////////
++++
<style>
.lang-ts a.xref {
  text-decoration: underline !important;
}
</style>
++++


[discrete]
[[client.ccr.deleteAutoFollowPattern]]
== `client.ccr.deleteAutoFollowPattern()`

Deletes auto-follow patterns.

{ref}/ccr-delete-auto-follow-pattern.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrDeleteAutoFollowPatternRequest, options?: TransportRequestOptions) => Promise<CcrDeleteAutoFollowPatternResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrDeleteAutoFollowPatternRequest extends <<RequestBase>> {
  name: <<Name>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrDeleteAutoFollowPatternResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.follow]]
== `client.ccr.follow()`

Creates a new follower index configured to follow the referenced leader index.

{ref}/ccr-put-follow.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrFollowRequest, options?: TransportRequestOptions) => Promise<CcrFollowResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrFollowRequest extends <<RequestBase>> {
  index: <<IndexName>>
  wait_for_active_shards?: <<WaitForActiveShards>>
  data_stream_name?: string
  leader_index: <<IndexName>>
  max_outstanding_read_requests?: <<long>>
  max_outstanding_write_requests?: <<integer>>
  max_read_request_operation_count?: <<integer>>
  max_read_request_size?: <<ByteSize>>
  max_retry_delay?: <<Duration>>
  max_write_buffer_count?: <<integer>>
  max_write_buffer_size?: <<ByteSize>>
  max_write_request_operation_count?: <<integer>>
  max_write_request_size?: <<ByteSize>>
  read_poll_timeout?: <<Duration>>
  remote_cluster: string
  settings?: <<IndicesIndexSettings>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrFollowResponse {
  follow_index_created: boolean
  follow_index_shards_acked: boolean
  index_following_started: boolean
}

----


[discrete]
[[client.ccr.followInfo]]
== `client.ccr.followInfo()`

Retrieves information about all follower indices, including parameters and status for each follower index

{ref}/ccr-get-follow-info.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrFollowInfoRequest, options?: TransportRequestOptions) => Promise<CcrFollowInfoResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrFollowInfoRequest extends <<RequestBase>> {
  index: <<Indices>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrFollowInfoResponse {
  follower_indices: CcrFollowInfoFollowerIndex[]
}

----


[discrete]
[[client.ccr.followStats]]
== `client.ccr.followStats()`

Retrieves follower stats. return shard-level stats about the following tasks associated with each shard for the specified indices.

{ref}/ccr-get-follow-stats.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrFollowStatsRequest, options?: TransportRequestOptions) => Promise<CcrFollowStatsResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrFollowStatsRequest extends <<RequestBase>> {
  index: <<Indices>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrFollowStatsResponse {
  indices: <<CcrFollowIndexStats>>[]
}

----


[discrete]
[[client.ccr.forgetFollower]]
== `client.ccr.forgetFollower()`

Removes the follower retention leases from the leader.

{ref}/ccr-post-forget-follower.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrForgetFollowerRequest, options?: TransportRequestOptions) => Promise<CcrForgetFollowerResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrForgetFollowerRequest extends <<RequestBase>> {
  index: <<IndexName>>
  follower_cluster?: string
  follower_index?: <<IndexName>>
  follower_index_uuid?: <<Uuid>>
  leader_remote_cluster?: string
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrForgetFollowerResponse {
  _shards: <<ShardStatistics>>
}

----


[discrete]
[[client.ccr.getAutoFollowPattern]]
== `client.ccr.getAutoFollowPattern()`

Gets configured auto-follow patterns. Returns the specified auto-follow pattern collection.

{ref}/ccr-get-auto-follow-pattern.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrGetAutoFollowPatternRequest, options?: TransportRequestOptions) => Promise<CcrGetAutoFollowPatternResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrGetAutoFollowPatternRequest extends <<RequestBase>> {
  name?: <<Name>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrGetAutoFollowPatternResponse {
  patterns: CcrGetAutoFollowPatternAutoFollowPattern[]
}

----


[discrete]
[[client.ccr.pauseAutoFollowPattern]]
== `client.ccr.pauseAutoFollowPattern()`

Pauses an auto-follow pattern

{ref}/ccr-pause-auto-follow-pattern.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrPauseAutoFollowPatternRequest, options?: TransportRequestOptions) => Promise<CcrPauseAutoFollowPatternResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrPauseAutoFollowPatternRequest extends <<RequestBase>> {
  name: <<Name>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrPauseAutoFollowPatternResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.pauseFollow]]
== `client.ccr.pauseFollow()`

Pauses a follower index. The follower index will not fetch any additional operations from the leader index.

{ref}/ccr-post-pause-follow.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrPauseFollowRequest, options?: TransportRequestOptions) => Promise<CcrPauseFollowResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrPauseFollowRequest extends <<RequestBase>> {
  index: <<IndexName>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrPauseFollowResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.putAutoFollowPattern]]
== `client.ccr.putAutoFollowPattern()`

Creates a new named collection of auto-follow patterns against a specified remote cluster. Newly created indices on the remote cluster matching any of the specified patterns will be automatically configured as follower indices.

{ref}/ccr-put-auto-follow-pattern.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrPutAutoFollowPatternRequest, options?: TransportRequestOptions) => Promise<CcrPutAutoFollowPatternResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrPutAutoFollowPatternRequest extends <<RequestBase>> {
  name: <<Name>>
  remote_cluster: string
  follow_index_pattern?: <<IndexPattern>>
  leader_index_patterns?: <<IndexPatterns>>
  leader_index_exclusion_patterns?: <<IndexPatterns>>
  max_outstanding_read_requests?: <<integer>>
  settings?: Record<string, any>
  max_outstanding_write_requests?: <<integer>>
  read_poll_timeout?: <<Duration>>
  max_read_request_operation_count?: <<integer>>
  max_read_request_size?: <<ByteSize>>
  max_retry_delay?: <<Duration>>
  max_write_buffer_count?: <<integer>>
  max_write_buffer_size?: <<ByteSize>>
  max_write_request_operation_count?: <<integer>>
  max_write_request_size?: <<ByteSize>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrPutAutoFollowPatternResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.resumeAutoFollowPattern]]
== `client.ccr.resumeAutoFollowPattern()`

Resumes an auto-follow pattern that has been paused

{ref}/ccr-resume-auto-follow-pattern.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrResumeAutoFollowPatternRequest, options?: TransportRequestOptions) => Promise<CcrResumeAutoFollowPatternResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrResumeAutoFollowPatternRequest extends <<RequestBase>> {
  name: <<Name>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrResumeAutoFollowPatternResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.resumeFollow]]
== `client.ccr.resumeFollow()`

Resumes a follower index that has been paused

{ref}/ccr-post-resume-follow.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrResumeFollowRequest, options?: TransportRequestOptions) => Promise<CcrResumeFollowResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrResumeFollowRequest extends <<RequestBase>> {
  index: <<IndexName>>
  max_outstanding_read_requests?: <<long>>
  max_outstanding_write_requests?: <<long>>
  max_read_request_operation_count?: <<long>>
  max_read_request_size?: string
  max_retry_delay?: <<Duration>>
  max_write_buffer_count?: <<long>>
  max_write_buffer_size?: string
  max_write_request_operation_count?: <<long>>
  max_write_request_size?: string
  read_poll_timeout?: <<Duration>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrResumeFollowResponse = <<AcknowledgedResponseBase>>

----


[discrete]
[[client.ccr.stats]]
== `client.ccr.stats()`

Gets all stats related to cross-cluster replication.

{ref}/ccr-get-stats.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrStatsRequest, options?: TransportRequestOptions) => Promise<CcrStatsResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrStatsRequest extends <<RequestBase>> {}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
interface CcrStatsResponse {
  auto_follow_stats: CcrStatsAutoFollowStats
  follow_stats: CcrStatsFollowStats
}

----


[discrete]
[[client.ccr.unfollow]]
== `client.ccr.unfollow()`

Stops the following task associated with a follower index and removes index metadata and settings associated with cross-cluster replication.

{ref}/ccr-post-unfollow.html[{es} documentation]
[discrete]
=== Function signature

[source,ts]
----
(request: CcrUnfollowRequest, options?: TransportRequestOptions) => Promise<CcrUnfollowResponse>
----

[discrete]
=== Request

[source,ts,subs=+macros]
----
interface CcrUnfollowRequest extends <<RequestBase>> {
  index: <<IndexName>>
}

----


[discrete]
=== Response

[source,ts,subs=+macros]
----
type CcrUnfollowResponse = <<AcknowledgedResponseBase>>

----


