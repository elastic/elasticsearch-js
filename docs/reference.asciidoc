[[api-reference]]

////////



===========================================================================================================================
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
||        ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗                                                            ||
||        ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝                                                            ||
||        ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗                                                              ||
||        ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝                                                              ||
||        ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗                                                            ||
||        ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝                                                            ||
||                                                                                                                       ||
||                                                                                                                       ||
||    This file is autogenerated, DO NOT send pull requests that changes this file directly.                             ||
||    You should update the script that does the generation, which can be found in '/scripts/utils/generateDocs.js'.     ||
||                                                                                                                       ||
||    You can run the script with the following command:                                                                 ||
||       node scripts/generate --branch <branch_name>                                                                    ||
||    or                                                                                                                 ||
||       node scripts/generate --tag <tag_name>                                                                          ||
||                                                                                                                       ||
||                                                                                                                       ||
||                                                                                                                       ||
===========================================================================================================================



////////

== API Reference

This document contains the entire list of the Elasticsearch API supported by the client, both OSS and commercial. The client is entirely licensed under Apache 2.0.

Elasticsearch exposes an HTTP layer to communicate with, and the client is a library that will help you do this. Because of this reason, you will see HTTP related parameters, such as `body` or `headers`.

Every API can accept two objects, the first contains all the parameters that will be sent to Elasticsearch, while the second includes the request specific parameters, such as timeouts, headers, and so on.
In the first object, every parameter but the body will be sent via querystring or url parameter, depending on the API, and every unrecognized parameter will be sent as querystring.

[source,js]
----
// promise API
const result = await client.search({
  index: 'my-index',
  from: 20,
  size: 10,
  body: { foo: 'bar' }
}, {
  ignore: [404],
  maxRetries: 3
})

// callback API
client.search({
  index: 'my-index',
  from: 20,
  size: 10,
  body: { foo: 'bar' }
}, {
  ignore: [404],
  maxRetries: 3
}, (err, result) => {
  if (err) console.log(err)
})
----

In this document, you will find the reference of every parameter accepted by the querystring or the url. If you also need to send the body, you can find the documentation of its format in the reference link that is present along with every endpoint.



=== Common parameters
Parameters that are accepted by all API endpoints.

link:{ref}/common-options.html[Documentation]
[cols=2*]
|===
|`pretty`
|`boolean` - Pretty format the returned JSON response.

|`human`
|`boolean` - Return human readable values for statistics. +
    _Default:_ `true`

|`error_trace` or `errorTrace`
|`boolean` - Include the stack trace of returned errors.

|`source`
|`string` - The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.

|`filter_path` or `filterPath`
|`list` - A comma-separated list of filters used to reduce the response.

|===
=== bulk

[source,ts]
----
client.bulk({
  index: string,
  type: string,
  wait_for_active_shards: string,
  refresh: 'true' | 'false' | 'wait_for',
  routing: string,
  timeout: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  pipeline: string,
  body: object
})
----
link:{ref}/docs-bulk.html[Documentation] +
{jsclient}/bulk_examples.html[Code Example] +
[cols=2*]
|===
|`index`
|`string` - Default index for items which don't provide one

|`type`
|`string` - Default document type for items which don't provide one

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the bulk operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or default list of fields to return, can be overridden on each sub-request

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - Default list of fields to exclude from the returned _source field, can be overridden on each sub-request

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - Default list of fields to extract and return from the _source field, can be overridden on each sub-request

|`pipeline`
|`string` - The pipeline id to preprocess incoming documents with

|`body`
|`object` - The operation definition and data (action-data pairs), separated by newlines

|===

=== cat.aliases

[source,ts]
----
client.cat.aliases({
  name: string | string[],
  format: string,
  local: boolean,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/cat-alias.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of alias names to return

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|===

=== cat.allocation

[source,ts]
----
client.cat.allocation({
  node_id: string | string[],
  format: string,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-allocation.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.count

[source,ts]
----
client.cat.count({
  index: string | string[],
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-count.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.fielddata

[source,ts]
----
client.cat.fielddata({
  fields: string | string[],
  format: string,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-fielddata.html[Documentation] +
[cols=2*]
|===
|`fields`
|`string \| string[]` - A comma-separated list of fields to return the fielddata size

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.health

[source,ts]
----
client.cat.health({
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  ts: boolean,
  v: boolean
})
----
link:{ref}/cat-health.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`ts`
|`boolean` - Set to false to disable timestamping +
_Default:_ `true`

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.help

[source,ts]
----
client.cat.help({
  help: boolean,
  s: string | string[]
})
----
link:{ref}/cat.html[Documentation] +
[cols=2*]
|===
|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|===

=== cat.indices

[source,ts]
----
client.cat.indices({
  index: string | string[],
  format: string,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  local: boolean,
  master_timeout: string,
  h: string | string[],
  health: 'green' | 'yellow' | 'red',
  help: boolean,
  pri: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean,
  include_unloaded_segments: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/cat-indices.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`health`
|`'green' \| 'yellow' \| 'red'` - A health status ("green", "yellow", or "red" to filter only indices matching the specified health status

|`help`
|`boolean` - Return help information

|`pri`
|`boolean` - Set to true to return stats only for primary shards

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|`include_unloaded_segments` or `includeUnloadedSegments`
|`boolean` - If set to true segment stats will include stats for segments that are not currently loaded into memory

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|===

=== cat.master

[source,ts]
----
client.cat.master({
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-master.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.nodeattrs

[source,ts]
----
client.cat.nodeattrs({
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-nodeattrs.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.nodes

[source,ts]
----
client.cat.nodes({
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  format: string,
  full_id: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-nodes.html[Documentation] +
[cols=2*]
|===
|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`full_id` or `fullId`
|`boolean` - Return the full node ID instead of the shortened version (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.pendingTasks

[source,ts]
----
client.cat.pendingTasks({
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-pending-tasks.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.plugins

[source,ts]
----
client.cat.plugins({
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-plugins.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.recovery

[source,ts]
----
client.cat.recovery({
  index: string | string[],
  format: string,
  active_only: boolean,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  detailed: boolean,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-recovery.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - Comma-separated list or wildcard expression of index names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`active_only` or `activeOnly`
|`boolean` - If `true`, the response only includes ongoing shard recoveries

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`detailed`
|`boolean` - If `true`, the response includes detailed information about shard recoveries

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.repositories

[source,ts]
----
client.cat.repositories({
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-repositories.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.segments

[source,ts]
----
client.cat.segments({
  index: string | string[],
  format: string,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-segments.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.shards

[source,ts]
----
client.cat.shards({
  index: string | string[],
  format: string,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-shards.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to limit the returned information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.snapshots

[source,ts]
----
client.cat.snapshots({
  repository: string | string[],
  format: string,
  ignore_unavailable: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string \| string[]` - Name of repository from which to fetch the snapshot information

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Set to true to ignore unavailable snapshots

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.tasks

[source,ts]
----
client.cat.tasks({
  format: string,
  node_id: string | string[],
  actions: string | string[],
  detailed: boolean,
  parent_task: number,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/tasks.html[Documentation] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`actions`
|`string \| string[]` - A comma-separated list of actions that should be returned. Leave empty to return all.

|`detailed`
|`boolean` - Return detailed task information (default: false)

|`parent_task` or `parentTask`
|`number` - Return tasks with specified parent task id. Set to -1 to return all.

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.templates

[source,ts]
----
client.cat.templates({
  name: string,
  format: string,
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - A pattern that returned template names must match

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.threadPool

[source,ts]
----
client.cat.threadPool({
  thread_pool_patterns: string | string[],
  format: string,
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  local: boolean,
  master_timeout: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  v: boolean
})
----
link:{ref}/cat-thread-pool.html[Documentation] +
[cols=2*]
|===
|`thread_pool_patterns` or `threadPoolPatterns`
|`string \| string[]` - A comma-separated list of regular-expressions to filter the thread pools in the output

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== clearScroll

[source,ts]
----
client.clearScroll({
  scroll_id: string | string[],
  body: object
})
----
link:{ref}/search-request-body.html#_clear_scroll_api[Documentation] +
[cols=2*]
|===
|`scroll_id` or `scrollId`
|`string \| string[]` - A comma-separated list of scroll IDs to clear +

WARNING: This parameter has been deprecated.

|`body`
|`object` - A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter

|===

=== cluster.allocationExplain

[source,ts]
----
client.cluster.allocationExplain({
  include_yes_decisions: boolean,
  include_disk_info: boolean,
  body: object
})
----
link:{ref}/cluster-allocation-explain.html[Documentation] +
[cols=2*]
|===
|`include_yes_decisions` or `includeYesDecisions`
|`boolean` - Return 'YES' decisions in explanation (default: false)

|`include_disk_info` or `includeDiskInfo`
|`boolean` - Return information about disk usage and shard sizes (default: false)

|`body`
|`object` - The index, shard, and primary flag to explain. Empty means 'explain the first unassigned shard'

|===

=== cluster.deleteComponentTemplate
*Stability:* experimental
[source,ts]
----
client.cluster.deleteComponentTemplate({
  name: string,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/indices-component-template.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== cluster.deleteVotingConfigExclusions

[source,ts]
----
client.cluster.deleteVotingConfigExclusions({
  wait_for_removal: boolean
})
----
link:{ref}/voting-config-exclusions.html[Documentation] +
[cols=2*]
|===
|`wait_for_removal` or `waitForRemoval`
|`boolean` - Specifies whether to wait for all excluded nodes to be removed from the cluster before clearing the voting configuration exclusions list. +
_Default:_ `true`

|===

=== cluster.existsComponentTemplate
*Stability:* experimental
[source,ts]
----
client.cluster.existsComponentTemplate({
  name: string,
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-component-template.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== cluster.getComponentTemplate
*Stability:* experimental
[source,ts]
----
client.cluster.getComponentTemplate({
  name: string | string[],
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-component-template.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - The comma separated names of the component templates

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== cluster.getSettings

[source,ts]
----
client.cluster.getSettings({
  flat_settings: boolean,
  master_timeout: string,
  timeout: string,
  include_defaults: boolean
})
----
link:{ref}/cluster-update-settings.html[Documentation] +
[cols=2*]
|===
|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`include_defaults` or `includeDefaults`
|`boolean` - Whether to return all default clusters setting.

|===

=== cluster.health

[source,ts]
----
client.cluster.health({
  index: string | string[],
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  level: 'cluster' | 'indices' | 'shards',
  local: boolean,
  master_timeout: string,
  timeout: string,
  wait_for_active_shards: string,
  wait_for_nodes: string,
  wait_for_events: 'immediate' | 'urgent' | 'high' | 'normal' | 'low' | 'languid',
  wait_for_no_relocating_shards: boolean,
  wait_for_no_initializing_shards: boolean,
  wait_for_status: 'green' | 'yellow' | 'red'
})
----
link:{ref}/cluster-health.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - Limit the information returned to a specific index

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|`level`
|`'cluster' \| 'indices' \| 'shards'` - Specify the level of detail for returned information +
_Default:_ `cluster`

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Wait until the specified number of shards is active

|`wait_for_nodes` or `waitForNodes`
|`string` - Wait until the specified number of nodes is available

|`wait_for_events` or `waitForEvents`
|`'immediate' \| 'urgent' \| 'high' \| 'normal' \| 'low' \| 'languid'` - Wait until all currently queued events with the given priority are processed

|`wait_for_no_relocating_shards` or `waitForNoRelocatingShards`
|`boolean` - Whether to wait until there are no relocating shards in the cluster

|`wait_for_no_initializing_shards` or `waitForNoInitializingShards`
|`boolean` - Whether to wait until there are no initializing shards in the cluster

|`wait_for_status` or `waitForStatus`
|`'green' \| 'yellow' \| 'red'` - Wait until cluster is in a specific state

|===

=== cluster.pendingTasks

[source,ts]
----
client.cluster.pendingTasks({
  local: boolean,
  master_timeout: string
})
----
link:{ref}/cluster-pending.html[Documentation] +
[cols=2*]
|===
|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== cluster.postVotingConfigExclusions

[source,ts]
----
client.cluster.postVotingConfigExclusions({
  node_ids: string,
  node_names: string,
  timeout: string
})
----
link:{ref}/voting-config-exclusions.html[Documentation] +
[cols=2*]
|===
|`node_ids` or `nodeIds`
|`string` - A comma-separated list of the persistent ids of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_names.

|`node_names` or `nodeNames`
|`string` - A comma-separated list of the names of the nodes to exclude from the voting configuration. If specified, you may not also specify ?node_ids.

|`timeout`
|`string` - Explicit operation timeout +
_Default:_ `30s`

|===

=== cluster.putComponentTemplate
*Stability:* experimental
[source,ts]
----
client.cluster.putComponentTemplate({
  name: string,
  create: boolean,
  timeout: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-component-template.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`create`
|`boolean` - Whether the index template should only be added if new or can also replace an existing one

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The template definition

|===

=== cluster.putSettings

[source,ts]
----
client.cluster.putSettings({
  flat_settings: boolean,
  master_timeout: string,
  timeout: string,
  body: object
})
----
link:{ref}/cluster-update-settings.html[Documentation] +
[cols=2*]
|===
|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`body`
|`object` - The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).

|===

=== cluster.remoteInfo

[source,ts]
----
client.cluster.remoteInfo()
----
link:{ref}/cluster-remote-info.html[Documentation] +


=== cluster.reroute

[source,ts]
----
client.cluster.reroute({
  dry_run: boolean,
  explain: boolean,
  retry_failed: boolean,
  metric: string | string[],
  master_timeout: string,
  timeout: string,
  body: object
})
----
link:{ref}/cluster-reroute.html[Documentation] +
[cols=2*]
|===
|`dry_run` or `dryRun`
|`boolean` - Simulate the operation only and return the resulting state

|`explain`
|`boolean` - Return an explanation of why the commands can or cannot be executed

|`retry_failed` or `retryFailed`
|`boolean` - Retries allocation of shards that are blocked due to too many subsequent allocation failures

|`metric`
|`string \| string[]` - Limit the information returned to the specified metrics. Defaults to all but metadata

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`body`
|`object` - The definition of `commands` to perform (`move`, `cancel`, `allocate`)

|===

=== cluster.state

[source,ts]
----
client.cluster.state({
  index: string | string[],
  metric: string | string[],
  local: boolean,
  master_timeout: string,
  flat_settings: boolean,
  wait_for_metadata_version: number,
  wait_for_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/cluster-state.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`metric`
|`string \| string[]` - Limit the information returned to the specified metrics

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`wait_for_metadata_version` or `waitForMetadataVersion`
|`number` - Wait for the metadata version to be equal or greater than the specified metadata version

|`wait_for_timeout` or `waitForTimeout`
|`string` - The maximum time to wait for wait_for_metadata_version before timing out

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== cluster.stats

[source,ts]
----
client.cluster.stats({
  node_id: string | string[],
  flat_settings: boolean,
  timeout: string
})
----
link:{ref}/cluster-stats.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`timeout`
|`string` - Explicit operation timeout

|===

=== count

[source,ts]
----
client.count({
  index: string | string[],
  ignore_unavailable: boolean,
  ignore_throttled: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  min_score: number,
  preference: string,
  routing: string | string[],
  q: string,
  analyzer: string,
  analyze_wildcard: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  lenient: boolean,
  terminate_after: number,
  body: object
})
----
link:{ref}/search-count.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of indices to restrict the results

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Whether specified concrete, expanded or aliased indices should be ignored when throttled

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`min_score` or `minScore`
|`number` - Include only documents with a specific `_score` value in the result

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`q`
|`string` - Query in the Lucene query string syntax

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`terminate_after` or `terminateAfter`
|`number` - The maximum count for each shard, upon reaching which the query execution will terminate early

|`body`
|`object` - A query to restrict the results specified with the Query DSL (optional)

|===

=== create

[source,ts]
----
client.create({
  id: string,
  index: string,
  type: string,
  wait_for_active_shards: string,
  refresh: 'true' | 'false' | 'wait_for',
  routing: string,
  timeout: string,
  version: number,
  version_type: 'internal' | 'external' | 'external_gte',
  pipeline: string,
  body: object
})
----
link:{ref}/docs-index_.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Document ID

|`index`
|`string` - The name of the index

|`type`
|`string` - The type of the document +

WARNING: This parameter has been deprecated.

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|`pipeline`
|`string` - The pipeline id to preprocess incoming documents with

|`body`
|`object` - The document

|===

=== danglingIndices.deleteDanglingIndex

[source,ts]
----
client.danglingIndices.deleteDanglingIndex({
  index_uuid: string,
  accept_data_loss: boolean,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/modules-gateway-dangling-indices.html[Documentation] +
[cols=2*]
|===
|`index_uuid` or `indexUuid`
|`string` - The UUID of the dangling index

|`accept_data_loss` or `acceptDataLoss`
|`boolean` - Must be set to true in order to delete the dangling index

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== danglingIndices.importDanglingIndex

[source,ts]
----
client.danglingIndices.importDanglingIndex({
  index_uuid: string,
  accept_data_loss: boolean,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/modules-gateway-dangling-indices.html[Documentation] +
[cols=2*]
|===
|`index_uuid` or `indexUuid`
|`string` - The UUID of the dangling index

|`accept_data_loss` or `acceptDataLoss`
|`boolean` - Must be set to true in order to import the dangling index

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== danglingIndices.listDanglingIndices

[source,ts]
----
client.danglingIndices.listDanglingIndices()
----
link:{ref}/modules-gateway-dangling-indices.html[Documentation] +


=== delete

[source,ts]
----
client.delete({
  id: string,
  index: string,
  type: string,
  wait_for_active_shards: string,
  refresh: 'true' | 'false' | 'wait_for',
  routing: string,
  timeout: string,
  if_seq_no: number,
  if_primary_term: number,
  version: number,
  version_type: 'internal' | 'external' | 'external_gte'
})
----
link:{ref}/docs-delete.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`type`
|`string` - The type of the document +

WARNING: This parameter has been deprecated.

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the delete operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`if_seq_no` or `ifSeqNo`
|`number` - only perform the delete operation if the last operation that has changed the document has the specified sequence number

|`if_primary_term` or `ifPrimaryTerm`
|`number` - only perform the delete operation if the last operation that has changed the document has the specified primary term

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|===

=== deleteByQuery

[source,ts]
----
client.deleteByQuery({
  index: string | string[],
  analyzer: string,
  analyze_wildcard: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  from: number,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  conflicts: 'abort' | 'proceed',
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  lenient: boolean,
  preference: string,
  q: string,
  routing: string | string[],
  scroll: string,
  search_type: 'query_then_fetch' | 'dfs_query_then_fetch',
  search_timeout: string,
  max_docs: number,
  sort: string | string[],
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  terminate_after: number,
  stats: string | string[],
  version: boolean,
  request_cache: boolean,
  refresh: boolean,
  timeout: string,
  wait_for_active_shards: string,
  scroll_size: number,
  wait_for_completion: boolean,
  requests_per_second: number,
  slices: number|string,
  body: object
})
----
link:{ref}/docs-delete-by-query.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`from`
|`number` - Starting offset (default: 0)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`conflicts`
|`'abort' \| 'proceed'` - What to do when the delete by query hits version conflicts? +
_Default:_ `abort`

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`q`
|`string` - Query in the Lucene query string syntax

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`scroll`
|`string` - Specify how long a consistent view of the index should be maintained for scrolled search

|`search_type` or `searchType`
|`'query_then_fetch' \| 'dfs_query_then_fetch'` - Search operation type

|`search_timeout` or `searchTimeout`
|`string` - Explicit timeout for each search request. Defaults to no timeout.

|`max_docs` or `maxDocs`
|`number` - Maximum number of documents to process (default: all documents)

|`sort`
|`string \| string[]` - A comma-separated list of <field>:<direction> pairs

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`terminate_after` or `terminateAfter`
|`number` - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.

|`stats`
|`string \| string[]` - Specific 'tag' of the request for logging and statistical purposes

|`version`
|`boolean` - Specify whether to return document version as part of a hit

|`request_cache` or `requestCache`
|`boolean` - Specify if request cache should be used for this request or not, defaults to index level setting

|`refresh`
|`boolean` - Should the affected indexes be refreshed?

|`timeout`
|`string` - Time each individual bulk request should wait for shards that are unavailable. +
_Default:_ `1m`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the delete by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`scroll_size` or `scrollSize`
|`number` - Size on the scroll request powering the delete by query +
_Default:_ `100`

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should the request should block until the delete by query is complete. +
_Default:_ `true`

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle for this request in sub-requests per second. -1 means no throttle.

|`slices`
|`number\|string` - The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`. +
_Default:_ `1`

|`body`
|`object` - The search definition using the Query DSL

|===

=== deleteByQueryRethrottle

[source,ts]
----
client.deleteByQueryRethrottle({
  task_id: string,
  requests_per_second: number
})
----
link:{ref}/docs-delete-by-query.html[Documentation] +
[cols=2*]
|===
|`task_id` or `taskId`
|`string` - The task id to rethrottle

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.

|===

=== deleteScript

[source,ts]
----
client.deleteScript({
  id: string,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/modules-scripting.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Script ID

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== exists

[source,ts]
----
client.exists({
  id: string,
  index: string,
  stored_fields: string | string[],
  preference: string,
  realtime: boolean,
  refresh: boolean,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  version: number,
  version_type: 'internal' | 'external' | 'external_gte'
})
----
link:{ref}/docs-get.html[Documentation] +
{jsclient}/exists_examples.html[Code Example] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return in the response

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`realtime`
|`boolean` - Specify whether to perform the operation in realtime or search mode

|`refresh`
|`boolean` - Refresh the shard containing the document before performing the operation

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|===

=== existsSource

[source,ts]
----
client.existsSource({
  id: string,
  index: string,
  type: string,
  preference: string,
  realtime: boolean,
  refresh: boolean,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  version: number,
  version_type: 'internal' | 'external' | 'external_gte'
})
----
link:{ref}/docs-get.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`type`
|`string` - The type of the document; deprecated and optional starting with 7.0 +

WARNING: This parameter has been deprecated.

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`realtime`
|`boolean` - Specify whether to perform the operation in realtime or search mode

|`refresh`
|`boolean` - Refresh the shard containing the document before performing the operation

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|===

=== explain

[source,ts]
----
client.explain({
  id: string,
  index: string,
  analyze_wildcard: boolean,
  analyzer: string,
  default_operator: 'AND' | 'OR',
  df: string,
  stored_fields: string | string[],
  lenient: boolean,
  preference: string,
  q: string,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  body: object
})
----
link:{ref}/search-explain.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcards and prefix queries in the query string query should be analyzed (default: false)

|`analyzer`
|`string` - The analyzer for the query string query

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The default field for query string query (default: _all)

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return in the response

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`q`
|`string` - Query in the Lucene query string syntax

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`body`
|`object` - The query definition using the Query DSL

|===

=== fieldCaps

[source,ts]
----
client.fieldCaps({
  index: string | string[],
  fields: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  include_unmapped: boolean,
  body: object
})
----
link:{ref}/search-field-caps.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`fields`
|`string \| string[]` - A comma-separated list of field names

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`include_unmapped` or `includeUnmapped`
|`boolean` - Indicates whether unmapped fields should be included in the response.

|`body`
|`object` - An index filter specified with the Query DSL

|===

=== get

[source,ts]
----
client.get({
  id: string,
  index: string,
  stored_fields: string | string[],
  preference: string,
  realtime: boolean,
  refresh: boolean,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  version: number,
  version_type: 'internal' | 'external' | 'external_gte'
})
----
link:{ref}/docs-get.html[Documentation] +
{jsclient}/get_examples.html[Code Example] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return in the response

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`realtime`
|`boolean` - Specify whether to perform the operation in realtime or search mode

|`refresh`
|`boolean` - Refresh the shard containing the document before performing the operation

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|===

=== getScript

[source,ts]
----
client.getScript({
  id: string,
  master_timeout: string
})
----
link:{ref}/modules-scripting.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Script ID

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== getScriptContext
*Stability:* experimental
[source,ts]
----
client.getScriptContext()
----
link:https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-contexts.html[Documentation] +


=== getScriptLanguages
*Stability:* experimental
[source,ts]
----
client.getScriptLanguages()
----
link:{ref}/modules-scripting.html[Documentation] +


=== getSource

[source,ts]
----
client.getSource({
  id: string,
  index: string,
  preference: string,
  realtime: boolean,
  refresh: boolean,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  version: number,
  version_type: 'internal' | 'external' | 'external_gte'
})
----
link:{ref}/docs-get.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The document ID

|`index`
|`string` - The name of the index

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`realtime`
|`boolean` - Specify whether to perform the operation in realtime or search mode

|`refresh`
|`boolean` - Refresh the shard containing the document before performing the operation

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|===

=== index

[source,ts]
----
client.index({
  id: string,
  index: string,
  wait_for_active_shards: string,
  op_type: 'index' | 'create',
  refresh: 'true' | 'false' | 'wait_for',
  routing: string,
  timeout: string,
  version: number,
  version_type: 'internal' | 'external' | 'external_gte',
  if_seq_no: number,
  if_primary_term: number,
  pipeline: string,
  body: object
})
----
link:{ref}/docs-index_.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Document ID

|`index`
|`string` - The name of the index

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the index operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`op_type` or `opType`
|`'index' \| 'create'` - Explicit operation type. Defaults to `index` for requests with an explicit document ID, and to `create`for requests without an explicit document ID

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|`if_seq_no` or `ifSeqNo`
|`number` - only perform the index operation if the last operation that has changed the document has the specified sequence number

|`if_primary_term` or `ifPrimaryTerm`
|`number` - only perform the index operation if the last operation that has changed the document has the specified primary term

|`pipeline`
|`string` - The pipeline id to preprocess incoming documents with

|`body`
|`object` - The document

|===

=== indices.addBlock

[source,ts]
----
client.indices.addBlock({
  index: string | string[],
  block: string,
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----

[cols=2*]
|===
|`index`
|`string \| string[]` - A comma separated list of indices to add a block to

|`block`
|`string` - The block to add (one of read, write, read_only or metadata)

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.analyze

[source,ts]
----
client.indices.analyze({
  index: string,
  body: object
})
----
link:{ref}/indices-analyze.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to scope the operation

|`body`
|`object` - Define analyzer/tokenizer parameters and the text on which the analysis should be performed

|===

=== indices.clearCache

[source,ts]
----
client.indices.clearCache({
  index: string | string[],
  fielddata: boolean,
  fields: string | string[],
  query: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  request: boolean
})
----
link:{ref}/indices-clearcache.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index name to limit the operation

|`fielddata`
|`boolean` - Clear field data

|`fields`
|`string \| string[]` - A comma-separated list of fields to clear when using the `fielddata` parameter (default: all)

|`query`
|`boolean` - Clear query caches

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`request`
|`boolean` - Clear request cache

|===

=== indices.clone

[source,ts]
----
client.indices.clone({
  index: string,
  target: string,
  timeout: string,
  master_timeout: string,
  wait_for_active_shards: string,
  body: object
})
----
link:{ref}/indices-clone-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the source index to clone

|`target`
|`string` - The name of the target index to clone into

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Set the number of active shards to wait for on the cloned index before the operation returns.

|`body`
|`object` - The configuration for the target index (`settings` and `aliases`)

|===

=== indices.close

[source,ts]
----
client.indices.close({
  index: string | string[],
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  wait_for_active_shards: string
})
----
link:{ref}/indices-open-close.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma separated list of indices to close

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of active shards to wait for before the operation returns.

|===

=== indices.create

[source,ts]
----
client.indices.create({
  index: string,
  wait_for_active_shards: string,
  timeout: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-create-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Set the number of active shards to wait for before the operation returns.

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The configuration for the index (`settings` and `mappings`)

|===

=== indices.createDataStream
*Stability:* experimental
[source,ts]
----
client.indices.createDataStream({
  name: string,
  body: object
})
----
link:{ref}/data-streams.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the data stream

|`body`
|`object` - The data stream definition

|===

=== indices.delete

[source,ts]
----
client.indices.delete({
  index: string | string[],
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-delete-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Ignore unavailable indexes (default: false)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Ignore if a wildcard expression resolves to no concrete indices (default: false)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether wildcard expressions should get expanded to open or closed indices (default: open) +
_Default:_ `open`

|===

=== indices.deleteAlias

[source,ts]
----
client.indices.deleteAlias({
  index: string | string[],
  name: string | string[],
  timeout: string,
  master_timeout: string
})
----
link:{ref}/indices-aliases.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names (supports wildcards); use `_all` for all indices

|`name`
|`string \| string[]` - A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.

|`timeout`
|`string` - Explicit timestamp for the document

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== indices.deleteDataStream
*Stability:* experimental
[source,ts]
----
client.indices.deleteDataStream({
  name: string | string[]
})
----
link:{ref}/data-streams.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of data streams to delete; use `*` to delete all data streams

|===

=== indices.deleteIndexTemplate
*Stability:* experimental
[source,ts]
----
client.indices.deleteIndexTemplate({
  name: string,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== indices.deleteTemplate

[source,ts]
----
client.indices.deleteTemplate({
  name: string,
  timeout: string,
  master_timeout: string
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== indices.exists

[source,ts]
----
client.indices.exists({
  index: string | string[],
  local: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  flat_settings: boolean,
  include_defaults: boolean
})
----
link:{ref}/indices-exists.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Ignore unavailable indexes (default: false)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Ignore if a wildcard expression resolves to no concrete indices (default: false)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether wildcard expressions should get expanded to open or closed indices (default: open) +
_Default:_ `open`

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`include_defaults` or `includeDefaults`
|`boolean` - Whether to return all default setting for each of the indices.

|===

=== indices.existsAlias

[source,ts]
----
client.indices.existsAlias({
  name: string | string[],
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  local: boolean
})
----
link:{ref}/indices-aliases.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of alias names to return

|`index`
|`string \| string[]` - A comma-separated list of index names to filter aliases

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.existsIndexTemplate
*Stability:* experimental
[source,ts]
----
client.indices.existsIndexTemplate({
  name: string,
  flat_settings: boolean,
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.existsTemplate

[source,ts]
----
client.indices.existsTemplate({
  name: string | string[],
  flat_settings: boolean,
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - The comma separated names of the index templates

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.existsType

[source,ts]
----
client.indices.existsType({
  index: string | string[],
  type: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  local: boolean
})
----
link:{ref}/indices-types-exists.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` to check the types across all indices

|`type`
|`string \| string[]` - A comma-separated list of document types to check

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.flush

[source,ts]
----
client.indices.flush({
  index: string | string[],
  force: boolean,
  wait_if_ongoing: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-flush.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string for all indices

|`force`
|`boolean` - Whether a flush should be forced even if it is not necessarily needed ie. if no changes will be committed to the index. This is useful if transaction log IDs should be incremented even if no uncommitted changes are present. (This setting can be considered as internal)

|`wait_if_ongoing` or `waitIfOngoing`
|`boolean` - If set to true the flush operation will block until the flush can be executed if another flush operation is already executing. The default is true. If set to false the flush will be skipped iff if another flush operation is already running.

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.forcemerge

[source,ts]
----
client.indices.forcemerge({
  index: string | string[],
  flush: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  max_num_segments: number,
  only_expunge_deletes: boolean
})
----
link:{ref}/indices-forcemerge.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`flush`
|`boolean` - Specify whether the index should be flushed after performing the operation (default: true)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`max_num_segments` or `maxNumSegments`
|`number` - The number of segments the index should be merged into (default: dynamic)

|`only_expunge_deletes` or `onlyExpungeDeletes`
|`boolean` - Specify whether the operation should only expunge deleted documents

|===

=== indices.get

[source,ts]
----
client.indices.get({
  index: string | string[],
  local: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  flat_settings: boolean,
  include_defaults: boolean,
  master_timeout: string
})
----
link:{ref}/indices-get-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Ignore unavailable indexes (default: false)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Ignore if a wildcard expression resolves to no concrete indices (default: false)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether wildcard expressions should get expanded to open or closed indices (default: open) +
_Default:_ `open`

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`include_defaults` or `includeDefaults`
|`boolean` - Whether to return all default setting for each of the indices.

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|===

=== indices.getAlias

[source,ts]
----
client.indices.getAlias({
  name: string | string[],
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  local: boolean
})
----
link:{ref}/indices-aliases.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of alias names to return

|`index`
|`string \| string[]` - A comma-separated list of index names to filter aliases

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.getDataStream
*Stability:* experimental
[source,ts]
----
client.indices.getDataStream({
  name: string | string[]
})
----
link:{ref}/data-streams.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of data streams to get; use `*` to get all data streams

|===

=== indices.getFieldMapping

[source,ts]
----
client.indices.getFieldMapping({
  fields: string | string[],
  index: string | string[],
  include_defaults: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  local: boolean
})
----
link:{ref}/indices-get-field-mapping.html[Documentation] +
[cols=2*]
|===
|`fields`
|`string \| string[]` - A comma-separated list of fields

|`index`
|`string \| string[]` - A comma-separated list of index names

|`include_defaults` or `includeDefaults`
|`boolean` - Whether the default mapping values should be returned as well

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.getIndexTemplate
*Stability:* experimental
[source,ts]
----
client.indices.getIndexTemplate({
  name: string | string[],
  flat_settings: boolean,
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - The comma separated names of the index templates

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.getMapping

[source,ts]
----
client.indices.getMapping({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-get-mapping.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false) +

WARNING: This parameter has been deprecated.

|===

=== indices.getSettings

[source,ts]
----
client.indices.getSettings({
  index: string | string[],
  name: string | string[],
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  flat_settings: boolean,
  local: boolean,
  include_defaults: boolean
})
----
link:{ref}/indices-get-settings.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`name`
|`string \| string[]` - The name of the settings that should be included

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `all`

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`include_defaults` or `includeDefaults`
|`boolean` - Whether to return all default setting for each of the indices.

|===

=== indices.getTemplate

[source,ts]
----
client.indices.getTemplate({
  name: string | string[],
  flat_settings: boolean,
  master_timeout: string,
  local: boolean
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - The comma separated names of the index templates

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== indices.getUpgrade

[source,ts]
----
client.indices.getUpgrade({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-upgrade.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.open

[source,ts]
----
client.indices.open({
  index: string | string[],
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  wait_for_active_shards: string
})
----
link:{ref}/indices-open-close.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma separated list of indices to open

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `closed`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of active shards to wait for before the operation returns.

|===

=== indices.putAlias

[source,ts]
----
client.indices.putAlias({
  index: string | string[],
  name: string,
  timeout: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-aliases.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.

|`name`
|`string` - The name of the alias to be created or updated

|`timeout`
|`string` - Explicit timestamp for the document

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The settings for the alias, such as `routing` or `filter`

|===

=== indices.putIndexTemplate
*Stability:* experimental
[source,ts]
----
client.indices.putIndexTemplate({
  name: string,
  create: boolean,
  cause: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`create`
|`boolean` - Whether the index template should only be added if new or can also replace an existing one

|`cause`
|`string` - User defined reason for creating/updating the index template

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The template definition

|===

=== indices.putMapping

[source,ts]
----
client.indices.putMapping({
  index: string | string[],
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  body: object
})
----
link:{ref}/indices-put-mapping.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`body`
|`object` - The mapping definition

|===

=== indices.putSettings

[source,ts]
----
client.indices.putSettings({
  index: string | string[],
  master_timeout: string,
  timeout: string,
  preserve_existing: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  flat_settings: boolean,
  body: object
})
----
link:{ref}/indices-update-settings.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`timeout`
|`string` - Explicit operation timeout

|`preserve_existing` or `preserveExisting`
|`boolean` - Whether to update existing settings. If set to `true` existing settings on an index remain unchanged, the default is `false`

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`body`
|`object` - The index settings to be updated

|===

=== indices.putTemplate

[source,ts]
----
client.indices.putTemplate({
  name: string,
  order: number,
  create: boolean,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the template

|`order`
|`number` - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)

|`create`
|`boolean` - Whether the index template should only be added if new or can also replace an existing one

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The template definition

|===

=== indices.recovery

[source,ts]
----
client.indices.recovery({
  index: string | string[],
  detailed: boolean,
  active_only: boolean
})
----
link:{ref}/indices-recovery.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`detailed`
|`boolean` - Whether to display detailed information about shard recovery

|`active_only` or `activeOnly`
|`boolean` - Display only those recoveries that are currently on-going

|===

=== indices.refresh

[source,ts]
----
client.indices.refresh({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-refresh.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.resolveIndex
*Stability:* experimental
[source,ts]
----
client.indices.resolveIndex({
  name: string | string[],
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----

[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of names or wildcard expressions

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether wildcard expressions should get expanded to open or closed indices (default: open) +
_Default:_ `open`

|===

=== indices.rollover

[source,ts]
----
client.indices.rollover({
  alias: string,
  new_index: string,
  timeout: string,
  dry_run: boolean,
  master_timeout: string,
  wait_for_active_shards: string,
  body: object
})
----
link:{ref}/indices-rollover-index.html[Documentation] +
[cols=2*]
|===
|`alias`
|`string` - The name of the alias to rollover

|`new_index` or `newIndex`
|`string` - The name of the rollover index

|`timeout`
|`string` - Explicit operation timeout

|`dry_run` or `dryRun`
|`boolean` - If set to true the rollover action will only be validated but not actually performed even if a condition matches. The default is false

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Set the number of active shards to wait for on the newly created rollover index before the operation returns.

|`body`
|`object` - The conditions that needs to be met for executing rollover

|===

=== indices.segments

[source,ts]
----
client.indices.segments({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  verbose: boolean
})
----
link:{ref}/indices-segments.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`verbose`
|`boolean` - Includes detailed memory usage by Lucene.

|===

=== indices.shardStores

[source,ts]
----
client.indices.shardStores({
  index: string | string[],
  status: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-shards-stores.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`status`
|`string \| string[]` - A comma-separated list of statuses used to filter on shards to get store information for

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.shrink

[source,ts]
----
client.indices.shrink({
  index: string,
  target: string,
  timeout: string,
  master_timeout: string,
  wait_for_active_shards: string,
  body: object
})
----
link:{ref}/indices-shrink-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the source index to shrink

|`target`
|`string` - The name of the target index to shrink into

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Set the number of active shards to wait for on the shrunken index before the operation returns.

|`body`
|`object` - The configuration for the target index (`settings` and `aliases`)

|===

=== indices.simulateIndexTemplate
*Stability:* experimental
[source,ts]
----
client.indices.simulateIndexTemplate({
  name: string,
  create: boolean,
  cause: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the index (it must be a concrete index name)

|`create`
|`boolean` - Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one

|`cause`
|`string` - User defined reason for dry-run creating the new template for simulation purposes

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - New index template definition, which will be included in the simulation, as if it already exists in the system

|===

=== indices.simulateTemplate
*Stability:* experimental
[source,ts]
----
client.indices.simulateTemplate({
  name: string,
  create: boolean,
  cause: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-templates.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the index template

|`create`
|`boolean` - Whether the index template we optionally defined in the body should only be dry-run added if new or can also replace an existing one

|`cause`
|`string` - User defined reason for dry-run creating the new template for simulation purposes

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - New index template definition to be simulated, if no index template name is specified

|===

=== indices.split

[source,ts]
----
client.indices.split({
  index: string,
  target: string,
  timeout: string,
  master_timeout: string,
  wait_for_active_shards: string,
  body: object
})
----
link:{ref}/indices-split-index.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the source index to split

|`target`
|`string` - The name of the target index to split into

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Set the number of active shards to wait for on the shrunken index before the operation returns.

|`body`
|`object` - The configuration for the target index (`settings` and `aliases`)

|===

=== indices.stats

[source,ts]
----
client.indices.stats({
  metric: string | string[],
  index: string | string[],
  completion_fields: string | string[],
  fielddata_fields: string | string[],
  fields: string | string[],
  groups: string | string[],
  level: 'cluster' | 'indices' | 'shards',
  types: string | string[],
  include_segment_file_sizes: boolean,
  include_unloaded_segments: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  forbid_closed_indices: boolean
})
----
link:{ref}/indices-stats.html[Documentation] +
[cols=2*]
|===
|`metric`
|`string \| string[]` - Limit the information returned the specific metrics.

|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`completion_fields` or `completionFields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)

|`fielddata_fields` or `fielddataFields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` index metric (supports wildcards)

|`fields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)

|`groups`
|`string \| string[]` - A comma-separated list of search groups for `search` index metric

|`level`
|`'cluster' \| 'indices' \| 'shards'` - Return stats aggregated at cluster, index or shard level +
_Default:_ `indices`

|`types`
|`string \| string[]` - A comma-separated list of document types for the `indexing` index metric

|`include_segment_file_sizes` or `includeSegmentFileSizes`
|`boolean` - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)

|`include_unloaded_segments` or `includeUnloadedSegments`
|`boolean` - If set to true segment stats will include stats for segments that are not currently loaded into memory

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`forbid_closed_indices` or `forbidClosedIndices`
|`boolean` - If set to false stats will also collected from closed indices if explicitly specified or if expand_wildcards expands to closed indices +
_Default:_ `true`

|===

=== indices.updateAliases

[source,ts]
----
client.indices.updateAliases({
  timeout: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/indices-aliases.html[Documentation] +
[cols=2*]
|===
|`timeout`
|`string` - Request timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The definition of `actions` to perform

|===

=== indices.upgrade

[source,ts]
----
client.indices.upgrade({
  index: string | string[],
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  ignore_unavailable: boolean,
  wait_for_completion: boolean,
  only_ancient_segments: boolean
})
----
link:{ref}/indices-upgrade.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names; use `_all` or empty string to perform the operation on all indices

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Specify whether the request should block until the all segments are upgraded (default: false)

|`only_ancient_segments` or `onlyAncientSegments`
|`boolean` - If true, only ancient (an older Lucene major release) segments will be upgraded

|===

=== indices.validateQuery

[source,ts]
----
client.indices.validateQuery({
  index: string | string[],
  type: string | string[],
  explain: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  q: string,
  analyzer: string,
  analyze_wildcard: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  lenient: boolean,
  rewrite: boolean,
  all_shards: boolean,
  body: object
})
----
link:{ref}/search-validate.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices

|`type`
|`string \| string[]` - A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types +

WARNING: This parameter has been deprecated.

|`explain`
|`boolean` - Return detailed information about the error

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`q`
|`string` - Query in the Lucene query string syntax

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`rewrite`
|`boolean` - Provide a more detailed explanation showing the actual Lucene query that will be executed.

|`all_shards` or `allShards`
|`boolean` - Execute validation on all shards instead of one random shard per index

|`body`
|`object` - The query definition specified with the Query DSL

|===

=== info

[source,ts]
----
client.info()
----
link:{ref}/index.html[Documentation] +


=== ingest.deletePipeline

[source,ts]
----
client.ingest.deletePipeline({
  id: string,
  master_timeout: string,
  timeout: string
})
----
link:{ref}/delete-pipeline-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Pipeline ID

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|===

=== ingest.getPipeline

[source,ts]
----
client.ingest.getPipeline({
  id: string,
  master_timeout: string
})
----
link:{ref}/get-pipeline-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Comma separated list of pipeline ids. Wildcards supported

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|===

=== ingest.processorGrok

[source,ts]
----
client.ingest.processorGrok()
----
link:{ref}/grok-processor.html#grok-processor-rest-get[Documentation] +


=== ingest.putPipeline

[source,ts]
----
client.ingest.putPipeline({
  id: string,
  master_timeout: string,
  timeout: string,
  body: object
})
----
link:{ref}/put-pipeline-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Pipeline ID

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`body`
|`object` - The ingest definition

|===

=== ingest.simulate

[source,ts]
----
client.ingest.simulate({
  id: string,
  verbose: boolean,
  body: object
})
----
link:{ref}/simulate-pipeline-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Pipeline ID

|`verbose`
|`boolean` - Verbose mode. Display data output for each processor in executed pipeline

|`body`
|`object` - The simulate definition

|===

=== mget

[source,ts]
----
client.mget({
  index: string,
  stored_fields: string | string[],
  preference: string,
  realtime: boolean,
  refresh: boolean,
  routing: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  body: object
})
----
link:{ref}/docs-multi-get.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return in the response

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`realtime`
|`boolean` - Specify whether to perform the operation in realtime or search mode

|`refresh`
|`boolean` - Refresh the shard containing the document before performing the operation

|`routing`
|`string` - Specific routing value

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`body`
|`object` - Document identifiers; can be either `docs` (containing full document information) or `ids` (when index is provided in the URL.

|===

=== msearch

[source,ts]
----
client.msearch({
  index: string | string[],
  search_type: 'query_then_fetch' | 'query_and_fetch' | 'dfs_query_then_fetch' | 'dfs_query_and_fetch',
  max_concurrent_searches: number,
  typed_keys: boolean,
  pre_filter_shard_size: number,
  max_concurrent_shard_requests: number,
  rest_total_hits_as_int: boolean,
  ccs_minimize_roundtrips: boolean,
  body: object
})
----
link:{ref}/search-multi-search.html[Documentation] +
{jsclient}/msearch_examples.html[Code Example] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to use as default

|`search_type` or `searchType`
|`'query_then_fetch' \| 'query_and_fetch' \| 'dfs_query_then_fetch' \| 'dfs_query_and_fetch'` - Search operation type

|`max_concurrent_searches` or `maxConcurrentSearches`
|`number` - Controls the maximum number of concurrent searches the multi search api will execute

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`pre_filter_shard_size` or `preFilterShardSize`
|`number` - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.

|`max_concurrent_shard_requests` or `maxConcurrentShardRequests`
|`number` - The number of concurrent shard requests each sub search executes concurrently per node. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests +
_Default:_ `5`

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`ccs_minimize_roundtrips` or `ccsMinimizeRoundtrips`
|`boolean` - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution +
_Default:_ `true`

|`body`
|`object` - The request definitions (metadata-search request definition pairs), separated by newlines

|===

=== msearchTemplate

[source,ts]
----
client.msearchTemplate({
  index: string | string[],
  search_type: 'query_then_fetch' | 'query_and_fetch' | 'dfs_query_then_fetch' | 'dfs_query_and_fetch',
  typed_keys: boolean,
  max_concurrent_searches: number,
  rest_total_hits_as_int: boolean,
  ccs_minimize_roundtrips: boolean,
  body: object
})
----
link:{ref}/search-multi-search.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to use as default

|`search_type` or `searchType`
|`'query_then_fetch' \| 'query_and_fetch' \| 'dfs_query_then_fetch' \| 'dfs_query_and_fetch'` - Search operation type

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`max_concurrent_searches` or `maxConcurrentSearches`
|`number` - Controls the maximum number of concurrent searches the multi search api will execute

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`ccs_minimize_roundtrips` or `ccsMinimizeRoundtrips`
|`boolean` - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution +
_Default:_ `true`

|`body`
|`object` - The request definitions (metadata-search request definition pairs), separated by newlines

|===

=== mtermvectors

[source,ts]
----
client.mtermvectors({
  index: string,
  ids: string | string[],
  term_statistics: boolean,
  field_statistics: boolean,
  fields: string | string[],
  offsets: boolean,
  positions: boolean,
  payloads: boolean,
  preference: string,
  routing: string,
  realtime: boolean,
  version: number,
  version_type: 'internal' | 'external' | 'external_gte',
  body: object
})
----
link:{ref}/docs-multi-termvectors.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The index in which the document resides.

|`ids`
|`string \| string[]` - A comma-separated list of documents ids. You must define ids as parameter or set "ids" or "docs" in the request body

|`term_statistics` or `termStatistics`
|`boolean` - Specifies if total term frequency and document frequency should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs".

|`field_statistics` or `fieldStatistics`
|`boolean` - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs". +
_Default:_ `true`

|`fields`
|`string \| string[]` - A comma-separated list of fields to return. Applies to all returned documents unless otherwise specified in body "params" or "docs".

|`offsets`
|`boolean` - Specifies if term offsets should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs". +
_Default:_ `true`

|`positions`
|`boolean` - Specifies if term positions should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs". +
_Default:_ `true`

|`payloads`
|`boolean` - Specifies if term payloads should be returned. Applies to all returned documents unless otherwise specified in body "params" or "docs". +
_Default:_ `true`

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random) .Applies to all returned documents unless otherwise specified in body "params" or "docs".

|`routing`
|`string` - Specific routing value. Applies to all returned documents unless otherwise specified in body "params" or "docs".

|`realtime`
|`boolean` - Specifies if requests are real-time as opposed to near-real-time (default: true).

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|`body`
|`object` - Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.

|===

=== nodes.hotThreads

[source,ts]
----
client.nodes.hotThreads({
  node_id: string | string[],
  interval: string,
  snapshots: number,
  threads: number,
  ignore_idle_threads: boolean,
  type: 'cpu' | 'wait' | 'block',
  timeout: string
})
----
link:{ref}/cluster-nodes-hot-threads.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`interval`
|`string` - The interval for the second sampling of threads

|`snapshots`
|`number` - Number of samples of thread stacktrace (default: 10)

|`threads`
|`number` - Specify the number of threads to provide information for (default: 3)

|`ignore_idle_threads` or `ignoreIdleThreads`
|`boolean` - Don't show threads that are in known-idle places, such as waiting on a socket select or pulling from an empty task queue (default: true)

|`type`
|`'cpu' \| 'wait' \| 'block'` - The type to sample (default: cpu)

|`timeout`
|`string` - Explicit operation timeout

|===

=== nodes.info

[source,ts]
----
client.nodes.info({
  node_id: string | string[],
  metric: string | string[],
  flat_settings: boolean,
  timeout: string
})
----
link:{ref}/cluster-nodes-info.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`metric`
|`string \| string[]` - A comma-separated list of metrics you wish returned. Leave empty to return all.

|`flat_settings` or `flatSettings`
|`boolean` - Return settings in flat format (default: false)

|`timeout`
|`string` - Explicit operation timeout

|===

=== nodes.reloadSecureSettings

[source,ts]
----
client.nodes.reloadSecureSettings({
  node_id: string | string[],
  timeout: string,
  body: object
})
----
link:{ref}/secure-settings.html#reloadable-secure-settings[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs to span the reload/reinit call. Should stay empty because reloading usually involves all cluster nodes.

|`timeout`
|`string` - Explicit operation timeout

|`body`
|`object` - An object containing the password for the elasticsearch keystore

|===

=== nodes.stats

[source,ts]
----
client.nodes.stats({
  node_id: string | string[],
  metric: string | string[],
  index_metric: string | string[],
  completion_fields: string | string[],
  fielddata_fields: string | string[],
  fields: string | string[],
  groups: boolean,
  level: 'indices' | 'node' | 'shards',
  types: string | string[],
  timeout: string,
  include_segment_file_sizes: boolean
})
----
link:{ref}/cluster-nodes-stats.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`metric`
|`string \| string[]` - Limit the information returned to the specified metrics

|`index_metric` or `indexMetric`
|`string \| string[]` - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.

|`completion_fields` or `completionFields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)

|`fielddata_fields` or `fielddataFields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` index metric (supports wildcards)

|`fields`
|`string \| string[]` - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)

|`groups`
|`boolean` - A comma-separated list of search groups for `search` index metric

|`level`
|`'indices' \| 'node' \| 'shards'` - Return indices stats aggregated at index, node or shard level +
_Default:_ `node`

|`types`
|`string \| string[]` - A comma-separated list of document types for the `indexing` index metric

|`timeout`
|`string` - Explicit operation timeout

|`include_segment_file_sizes` or `includeSegmentFileSizes`
|`boolean` - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)

|===

=== nodes.usage

[source,ts]
----
client.nodes.usage({
  node_id: string | string[],
  metric: string | string[],
  timeout: string
})
----
link:{ref}/cluster-nodes-usage.html[Documentation] +
[cols=2*]
|===
|`node_id` or `nodeId`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`metric`
|`string \| string[]` - Limit the information returned to the specified metrics

|`timeout`
|`string` - Explicit operation timeout

|===

=== ping

[source,ts]
----
client.ping()
----
link:{ref}/index.html[Documentation] +


=== putScript

[source,ts]
----
client.putScript({
  id: string,
  context: string,
  timeout: string,
  master_timeout: string,
  body: object
})
----
link:{ref}/modules-scripting.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Script ID

|`context`
|`string` - Script context

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`body`
|`object` - The document

|===

=== rankEval
*Stability:* experimental
[source,ts]
----
client.rankEval({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  search_type: 'query_then_fetch' | 'dfs_query_then_fetch',
  body: object
})
----
link:{ref}/search-rank-eval.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`search_type` or `searchType`
|`'query_then_fetch' \| 'dfs_query_then_fetch'` - Search operation type

|`body`
|`object` - The ranking evaluation search definition, including search requests, document ratings and ranking metric definition.

|===

=== reindex

[source,ts]
----
client.reindex({
  refresh: boolean,
  timeout: string,
  wait_for_active_shards: string,
  wait_for_completion: boolean,
  requests_per_second: number,
  scroll: string,
  slices: number|string,
  max_docs: number,
  body: object
})
----
link:{ref}/docs-reindex.html[Documentation] +
{jsclient}/reindex_examples.html[Code Example] +
[cols=2*]
|===
|`refresh`
|`boolean` - Should the affected indexes be refreshed?

|`timeout`
|`string` - Time each individual bulk request should wait for shards that are unavailable. +
_Default:_ `1m`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should the request should block until the reindex is complete. +
_Default:_ `true`

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle to set on this request in sub-requests per second. -1 means no throttle.

|`scroll`
|`string` - Control how long to keep the search context alive +
_Default:_ `5m`

|`slices`
|`number\|string` - The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`. +
_Default:_ `1`

|`max_docs` or `maxDocs`
|`number` - Maximum number of documents to process (default: all documents)

|`body`
|`object` - The search definition using the Query DSL and the prototype for the index request.

|===

=== reindexRethrottle

[source,ts]
----
client.reindexRethrottle({
  task_id: string,
  requests_per_second: number
})
----
link:{ref}/docs-reindex.html[Documentation] +
[cols=2*]
|===
|`task_id` or `taskId`
|`string` - The task id to rethrottle

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.

|===

=== renderSearchTemplate

[source,ts]
----
client.renderSearchTemplate({
  id: string,
  body: object
})
----
link:{ref}/search-template.html#_validating_templates[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The id of the stored search template

|`body`
|`object` - The search definition template and its params

|===

=== scriptsPainlessExecute
*Stability:* experimental
[source,ts]
----
client.scriptsPainlessExecute({
  body: object
})
----
link:https://www.elastic.co/guide/en/elasticsearch/painless/master/painless-execute-api.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The script to execute

|===

=== scroll

[source,ts]
----
client.scroll({
  scroll_id: string,
  scroll: string,
  rest_total_hits_as_int: boolean,
  body: object
})
----
link:{ref}/search-request-body.html#request-body-search-scroll[Documentation] +
{jsclient}/scroll_examples.html[Code Example] +
[cols=2*]
|===
|`scroll_id` or `scrollId`
|`string` - The scroll ID +

WARNING: This parameter has been deprecated.

|`scroll`
|`string` - Specify how long a consistent view of the index should be maintained for scrolled search

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`body`
|`object` - The scroll ID if not passed by URL or query parameter.

|===

=== search

[source,ts]
----
client.search({
  index: string | string[],
  analyzer: string,
  analyze_wildcard: boolean,
  ccs_minimize_roundtrips: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  explain: boolean,
  stored_fields: string | string[],
  docvalue_fields: string | string[],
  from: number,
  ignore_unavailable: boolean,
  ignore_throttled: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  lenient: boolean,
  preference: string,
  q: string,
  routing: string | string[],
  scroll: string,
  search_type: 'query_then_fetch' | 'dfs_query_then_fetch',
  size: number,
  sort: string | string[],
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  terminate_after: number,
  stats: string | string[],
  suggest_field: string,
  suggest_mode: 'missing' | 'popular' | 'always',
  suggest_size: number,
  suggest_text: string,
  timeout: string,
  track_scores: boolean,
  track_total_hits: boolean|long,
  allow_partial_search_results: boolean,
  typed_keys: boolean,
  version: boolean,
  seq_no_primary_term: boolean,
  request_cache: boolean,
  batched_reduce_size: number,
  max_concurrent_shard_requests: number,
  pre_filter_shard_size: number,
  rest_total_hits_as_int: boolean,
  body: object
})
----
link:{ref}/search-search.html[Documentation] +
{jsclient}/search_examples.html[Code Example] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`ccs_minimize_roundtrips` or `ccsMinimizeRoundtrips`
|`boolean` - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution +
_Default:_ `true`

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`explain`
|`boolean` - Specify whether to return detailed information about score computation as part of a hit

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return as part of a hit

|`docvalue_fields` or `docvalueFields`
|`string \| string[]` - A comma-separated list of fields to return as the docvalue representation of a field for each hit

|`from`
|`number` - Starting offset (default: 0)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Whether specified concrete, expanded or aliased indices should be ignored when throttled

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`q`
|`string` - Query in the Lucene query string syntax

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`scroll`
|`string` - Specify how long a consistent view of the index should be maintained for scrolled search

|`search_type` or `searchType`
|`'query_then_fetch' \| 'dfs_query_then_fetch'` - Search operation type

|`size`
|`number` - Number of hits to return (default: 10)

|`sort`
|`string \| string[]` - A comma-separated list of <field>:<direction> pairs

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`terminate_after` or `terminateAfter`
|`number` - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.

|`stats`
|`string \| string[]` - Specific 'tag' of the request for logging and statistical purposes

|`suggest_field` or `suggestField`
|`string` - Specify which field to use for suggestions

|`suggest_mode` or `suggestMode`
|`'missing' \| 'popular' \| 'always'` - Specify suggest mode +
_Default:_ `missing`

|`suggest_size` or `suggestSize`
|`number` - How many suggestions to return in response

|`suggest_text` or `suggestText`
|`string` - The source text for which the suggestions should be returned

|`timeout`
|`string` - Explicit operation timeout

|`track_scores` or `trackScores`
|`boolean` - Whether to calculate and return scores even if they are not used for sorting

|`track_total_hits` or `trackTotalHits`
|`boolean\|long` - Indicate if the number of documents that match the query should be tracked. A number can also be specified, to accurately track the total hit count up to the number.

|`allow_partial_search_results` or `allowPartialSearchResults`
|`boolean` - Indicate if an error should be returned if there is a partial search failure or timeout +
_Default:_ `true`

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`version`
|`boolean` - Specify whether to return document version as part of a hit

|`seq_no_primary_term` or `seqNoPrimaryTerm`
|`boolean` - Specify whether to return sequence number and primary term of the last modification of each hit

|`request_cache` or `requestCache`
|`boolean` - Specify if request cache should be used for this request or not, defaults to index level setting

|`batched_reduce_size` or `batchedReduceSize`
|`number` - The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large. +
_Default:_ `512`

|`max_concurrent_shard_requests` or `maxConcurrentShardRequests`
|`number` - The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests +
_Default:_ `5`

|`pre_filter_shard_size` or `preFilterShardSize`
|`number` - A threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method ie. if date filters are mandatory to match but the shard bounds and the query are disjoint.

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`body`
|`object` - The search definition using the Query DSL

|===

=== searchShards

[source,ts]
----
client.searchShards({
  index: string | string[],
  preference: string,
  routing: string,
  local: boolean,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/search-shards.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`routing`
|`string` - Specific routing value

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== searchTemplate

[source,ts]
----
client.searchTemplate({
  index: string | string[],
  ignore_unavailable: boolean,
  ignore_throttled: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  preference: string,
  routing: string | string[],
  scroll: string,
  search_type: 'query_then_fetch' | 'query_and_fetch' | 'dfs_query_then_fetch' | 'dfs_query_and_fetch',
  explain: boolean,
  profile: boolean,
  typed_keys: boolean,
  rest_total_hits_as_int: boolean,
  ccs_minimize_roundtrips: boolean,
  body: object
})
----
link:{ref}/search-template.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Whether specified concrete, expanded or aliased indices should be ignored when throttled

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`scroll`
|`string` - Specify how long a consistent view of the index should be maintained for scrolled search

|`search_type` or `searchType`
|`'query_then_fetch' \| 'query_and_fetch' \| 'dfs_query_then_fetch' \| 'dfs_query_and_fetch'` - Search operation type

|`explain`
|`boolean` - Specify whether to return detailed information about score computation as part of a hit

|`profile`
|`boolean` - Specify whether to profile the query execution

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`ccs_minimize_roundtrips` or `ccsMinimizeRoundtrips`
|`boolean` - Indicates whether network round-trips should be minimized as part of cross-cluster search requests execution +
_Default:_ `true`

|`body`
|`object` - The search definition template and its params

|===

=== snapshot.cleanupRepository

[source,ts]
----
client.snapshot.cleanupRepository({
  repository: string,
  master_timeout: string,
  timeout: string
})
----
link:{ref}/clean-up-snapshot-repo-api.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|===

=== snapshot.create

[source,ts]
----
client.snapshot.create({
  repository: string,
  snapshot: string,
  master_timeout: string,
  wait_for_completion: boolean,
  body: object
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`snapshot`
|`string` - A snapshot name

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should this request wait until the operation has completed before returning

|`body`
|`object` - The snapshot definition

|===

=== snapshot.createRepository

[source,ts]
----
client.snapshot.createRepository({
  repository: string,
  master_timeout: string,
  timeout: string,
  verify: boolean,
  body: object
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|`verify`
|`boolean` - Whether to verify the repository after creation

|`body`
|`object` - The repository definition

|===

=== snapshot.delete

[source,ts]
----
client.snapshot.delete({
  repository: string,
  snapshot: string | string[],
  master_timeout: string
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`snapshot`
|`string \| string[]` - A comma-separated list of snapshot names

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|===

=== snapshot.deleteRepository

[source,ts]
----
client.snapshot.deleteRepository({
  repository: string | string[],
  master_timeout: string,
  timeout: string
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string \| string[]` - Name of the snapshot repository to unregister. Wildcard (`*`) patterns are supported.

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|===

=== snapshot.get

[source,ts]
----
client.snapshot.get({
  repository: string,
  snapshot: string | string[],
  master_timeout: string,
  ignore_unavailable: boolean,
  verbose: boolean
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`snapshot`
|`string \| string[]` - A comma-separated list of snapshot names

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown

|`verbose`
|`boolean` - Whether to show verbose snapshot info or only show the basic info found in the repository index blob

|===

=== snapshot.getRepository

[source,ts]
----
client.snapshot.getRepository({
  repository: string | string[],
  master_timeout: string,
  local: boolean
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string \| string[]` - A comma-separated list of repository names

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|===

=== snapshot.restore

[source,ts]
----
client.snapshot.restore({
  repository: string,
  snapshot: string,
  master_timeout: string,
  wait_for_completion: boolean,
  body: object
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`snapshot`
|`string` - A snapshot name

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should this request wait until the operation has completed before returning

|`body`
|`object` - Details of what to restore

|===

=== snapshot.status

[source,ts]
----
client.snapshot.status({
  repository: string,
  snapshot: string | string[],
  master_timeout: string,
  ignore_unavailable: boolean
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`snapshot`
|`string \| string[]` - A comma-separated list of snapshot names

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether to ignore unavailable snapshots, defaults to false which means a SnapshotMissingException is thrown

|===

=== snapshot.verifyRepository

[source,ts]
----
client.snapshot.verifyRepository({
  repository: string,
  master_timeout: string,
  timeout: string
})
----
link:{ref}/modules-snapshots.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - A repository name

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`timeout`
|`string` - Explicit operation timeout

|===

=== tasks.cancel

[source,ts]
----
client.tasks.cancel({
  task_id: string,
  nodes: string | string[],
  actions: string | string[],
  parent_task_id: string,
  wait_for_completion: boolean
})
----
link:{ref}/tasks.html[Documentation] +
[cols=2*]
|===
|`task_id` or `taskId`
|`string` - Cancel the task with specified task id (node_id:task_number)

|`nodes`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`actions`
|`string \| string[]` - A comma-separated list of actions that should be cancelled. Leave empty to cancel all.

|`parent_task_id` or `parentTaskId`
|`string` - Cancel tasks with specified parent task id (node_id:task_number). Set to -1 to cancel all.

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should the request block until the cancellation of the task and its descendant tasks is completed. Defaults to false

|===

=== tasks.get

[source,ts]
----
client.tasks.get({
  task_id: string,
  wait_for_completion: boolean,
  timeout: string
})
----
link:{ref}/tasks.html[Documentation] +
[cols=2*]
|===
|`task_id` or `taskId`
|`string` - Return the task with specified id (node_id:task_number)

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Wait for the matching tasks to complete (default: false)

|`timeout`
|`string` - Explicit operation timeout

|===

=== tasks.list

[source,ts]
----
client.tasks.list({
  nodes: string | string[],
  actions: string | string[],
  detailed: boolean,
  parent_task_id: string,
  wait_for_completion: boolean,
  group_by: 'nodes' | 'parents' | 'none',
  timeout: string
})
----
link:{ref}/tasks.html[Documentation] +
[cols=2*]
|===
|`nodes`
|`string \| string[]` - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes

|`actions`
|`string \| string[]` - A comma-separated list of actions that should be returned. Leave empty to return all.

|`detailed`
|`boolean` - Return detailed task information (default: false)

|`parent_task_id` or `parentTaskId`
|`string` - Return tasks with specified parent task id (node_id:task_number). Set to -1 to return all.

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Wait for the matching tasks to complete (default: false)

|`group_by` or `groupBy`
|`'nodes' \| 'parents' \| 'none'` - Group tasks by nodes or parent/child relationships +
_Default:_ `nodes`

|`timeout`
|`string` - Explicit operation timeout

|===

=== termvectors

[source,ts]
----
client.termvectors({
  index: string,
  id: string,
  term_statistics: boolean,
  field_statistics: boolean,
  fields: string | string[],
  offsets: boolean,
  positions: boolean,
  payloads: boolean,
  preference: string,
  routing: string,
  realtime: boolean,
  version: number,
  version_type: 'internal' | 'external' | 'external_gte',
  body: object
})
----
link:{ref}/docs-termvectors.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The index in which the document resides.

|`id`
|`string` - The id of the document, when not specified a doc param should be supplied.

|`term_statistics` or `termStatistics`
|`boolean` - Specifies if total term frequency and document frequency should be returned.

|`field_statistics` or `fieldStatistics`
|`boolean` - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned. +
_Default:_ `true`

|`fields`
|`string \| string[]` - A comma-separated list of fields to return.

|`offsets`
|`boolean` - Specifies if term offsets should be returned. +
_Default:_ `true`

|`positions`
|`boolean` - Specifies if term positions should be returned. +
_Default:_ `true`

|`payloads`
|`boolean` - Specifies if term payloads should be returned. +
_Default:_ `true`

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random).

|`routing`
|`string` - Specific routing value.

|`realtime`
|`boolean` - Specifies if request is real-time as opposed to near-real-time (default: true).

|`version`
|`number` - Explicit version number for concurrency control

|`version_type` or `versionType`
|`'internal' \| 'external' \| 'external_gte'` - Specific version type

|`body`
|`object` - Define parameters and or supply a document to get termvectors for. See documentation.

|===

=== update

[source,ts]
----
client.update({
  id: string,
  index: string,
  type: string,
  wait_for_active_shards: string,
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  lang: string,
  refresh: 'true' | 'false' | 'wait_for',
  retry_on_conflict: number,
  routing: string,
  timeout: string,
  if_seq_no: number,
  if_primary_term: number,
  body: object
})
----
link:{ref}/docs-update.html[Documentation] +
{jsclient}/update_examples.html[Code Example] +
[cols=2*]
|===
|`id`
|`string` - Document ID

|`index`
|`string` - The name of the index

|`type`
|`string` - The type of the document +

WARNING: This parameter has been deprecated.

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`lang`
|`string` - The script language (default: painless)

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.

|`retry_on_conflict` or `retryOnConflict`
|`number` - Specify how many times should the operation be retried when a conflict occurs (default: 0)

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`if_seq_no` or `ifSeqNo`
|`number` - only perform the update operation if the last operation that has changed the document has the specified sequence number

|`if_primary_term` or `ifPrimaryTerm`
|`number` - only perform the update operation if the last operation that has changed the document has the specified primary term

|`body`
|`object` - The request definition requires either `script` or partial `doc`

|===

=== updateByQuery

[source,ts]
----
client.updateByQuery({
  index: string | string[],
  analyzer: string,
  analyze_wildcard: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  from: number,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  conflicts: 'abort' | 'proceed',
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  lenient: boolean,
  pipeline: string,
  preference: string,
  q: string,
  routing: string | string[],
  scroll: string,
  search_type: 'query_then_fetch' | 'dfs_query_then_fetch',
  search_timeout: string,
  max_docs: number,
  sort: string | string[],
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  terminate_after: number,
  stats: string | string[],
  version: boolean,
  version_type: boolean,
  request_cache: boolean,
  refresh: boolean,
  timeout: string,
  wait_for_active_shards: string,
  scroll_size: number,
  wait_for_completion: boolean,
  requests_per_second: number,
  slices: number|string,
  body: object
})
----
link:{ref}/docs-update-by-query.html[Documentation] +
{jsclient}/update_by_query_examples.html[Code Example] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`from`
|`number` - Starting offset (default: 0)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`conflicts`
|`'abort' \| 'proceed'` - What to do when the update by query hits version conflicts? +
_Default:_ `abort`

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`pipeline`
|`string` - Ingest pipeline to set on index requests made by this action. (default: none)

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`q`
|`string` - Query in the Lucene query string syntax

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`scroll`
|`string` - Specify how long a consistent view of the index should be maintained for scrolled search

|`search_type` or `searchType`
|`'query_then_fetch' \| 'dfs_query_then_fetch'` - Search operation type

|`search_timeout` or `searchTimeout`
|`string` - Explicit timeout for each search request. Defaults to no timeout.

|`max_docs` or `maxDocs`
|`number` - Maximum number of documents to process (default: all documents)

|`sort`
|`string \| string[]` - A comma-separated list of <field>:<direction> pairs

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`terminate_after` or `terminateAfter`
|`number` - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.

|`stats`
|`string \| string[]` - Specific 'tag' of the request for logging and statistical purposes

|`version`
|`boolean` - Specify whether to return document version as part of a hit

|`version_type` or `versionType`
|`boolean` - Should the document increment the version number (internal) on hit or not (reindex)

|`request_cache` or `requestCache`
|`boolean` - Specify if request cache should be used for this request or not, defaults to index level setting

|`refresh`
|`boolean` - Should the affected indexes be refreshed?

|`timeout`
|`string` - Time each individual bulk request should wait for shards that are unavailable. +
_Default:_ `1m`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)

|`scroll_size` or `scrollSize`
|`number` - Size on the scroll request powering the update by query +
_Default:_ `100`

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should the request should block until the update by query operation is complete. +
_Default:_ `true`

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle to set on this request in sub-requests per second. -1 means no throttle.

|`slices`
|`number\|string` - The number of slices this task should be divided into. Defaults to 1, meaning the task isn't sliced into subtasks. Can be set to `auto`. +
_Default:_ `1`

|`body`
|`object` - The search definition using the Query DSL

|===

=== updateByQueryRethrottle

[source,ts]
----
client.updateByQueryRethrottle({
  task_id: string,
  requests_per_second: number
})
----
link:{ref}/docs-update-by-query.html[Documentation] +
[cols=2*]
|===
|`task_id` or `taskId`
|`string` - The task id to rethrottle

|`requests_per_second` or `requestsPerSecond`
|`number` - The throttle to set on this request in floating sub-requests per second. -1 means set no throttle.

|===

=== asyncSearch.delete

[source,ts]
----
client.asyncSearch.delete({
  id: string
})
----
link:{ref}/async-search.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The async search ID

|===

=== asyncSearch.get

[source,ts]
----
client.asyncSearch.get({
  id: string,
  wait_for_completion_timeout: string,
  keep_alive: string,
  typed_keys: boolean
})
----
link:{ref}/async-search.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The async search ID

|`wait_for_completion_timeout` or `waitForCompletionTimeout`
|`string` - Specify the time that the request should block waiting for the final response

|`keep_alive` or `keepAlive`
|`string` - Specify the time interval in which the results (partial or final) for this search will be available

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|===

=== asyncSearch.submit

[source,ts]
----
client.asyncSearch.submit({
  index: string | string[],
  wait_for_completion_timeout: string,
  keep_on_completion: boolean,
  keep_alive: string,
  batched_reduce_size: number,
  request_cache: boolean,
  analyzer: string,
  analyze_wildcard: boolean,
  default_operator: 'AND' | 'OR',
  df: string,
  explain: boolean,
  stored_fields: string | string[],
  docvalue_fields: string | string[],
  from: number,
  ignore_unavailable: boolean,
  ignore_throttled: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  lenient: boolean,
  preference: string,
  q: string,
  routing: string | string[],
  search_type: 'query_then_fetch' | 'dfs_query_then_fetch',
  size: number,
  sort: string | string[],
  _source: string | string[],
  _source_excludes: string | string[],
  _source_includes: string | string[],
  terminate_after: number,
  stats: string | string[],
  suggest_field: string,
  suggest_mode: 'missing' | 'popular' | 'always',
  suggest_size: number,
  suggest_text: string,
  timeout: string,
  track_scores: boolean,
  track_total_hits: boolean|long,
  allow_partial_search_results: boolean,
  typed_keys: boolean,
  version: boolean,
  seq_no_primary_term: boolean,
  max_concurrent_shard_requests: number,
  body: object
})
----
link:{ref}/async-search.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`wait_for_completion_timeout` or `waitForCompletionTimeout`
|`string` - Specify the time that the request should block waiting for the final response +
_Default:_ `1s`

|`keep_on_completion` or `keepOnCompletion`
|`boolean` - Control whether the response should be stored in the cluster if it completed within the provided [wait_for_completion] time (default: false)

|`keep_alive` or `keepAlive`
|`string` - Update the time interval in which the results (partial or final) for this search will be available +
_Default:_ `5d`

|`batched_reduce_size` or `batchedReduceSize`
|`number` - The number of shard results that should be reduced at once on the coordinating node. This value should be used as the granularity at which progress results will be made available. +
_Default:_ `5`

|`request_cache` or `requestCache`
|`boolean` - Specify if request cache should be used for this request or not, defaults to true

|`analyzer`
|`string` - The analyzer to use for the query string

|`analyze_wildcard` or `analyzeWildcard`
|`boolean` - Specify whether wildcard and prefix queries should be analyzed (default: false)

|`default_operator` or `defaultOperator`
|`'AND' \| 'OR'` - The default operator for query string query (AND or OR) +
_Default:_ `OR`

|`df`
|`string` - The field to use as default where no field prefix is given in the query string

|`explain`
|`boolean` - Specify whether to return detailed information about score computation as part of a hit

|`stored_fields` or `storedFields`
|`string \| string[]` - A comma-separated list of stored fields to return as part of a hit

|`docvalue_fields` or `docvalueFields`
|`string \| string[]` - A comma-separated list of fields to return as the docvalue representation of a field for each hit

|`from`
|`number` - Starting offset (default: 0)

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Whether specified concrete, expanded or aliased indices should be ignored when throttled

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|`lenient`
|`boolean` - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored

|`preference`
|`string` - Specify the node or shard the operation should be performed on (default: random)

|`q`
|`string` - Query in the Lucene query string syntax

|`routing`
|`string \| string[]` - A comma-separated list of specific routing values

|`search_type` or `searchType`
|`'query_then_fetch' \| 'dfs_query_then_fetch'` - Search operation type

|`size`
|`number` - Number of hits to return (default: 10)

|`sort`
|`string \| string[]` - A comma-separated list of <field>:<direction> pairs

|`_source`
|`string \| string[]` - True or false to return the _source field or not, or a list of fields to return

|`_source_excludes` or `_sourceExcludes`
|`string \| string[]` - A list of fields to exclude from the returned _source field

|`_source_includes` or `_sourceIncludes`
|`string \| string[]` - A list of fields to extract and return from the _source field

|`terminate_after` or `terminateAfter`
|`number` - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.

|`stats`
|`string \| string[]` - Specific 'tag' of the request for logging and statistical purposes

|`suggest_field` or `suggestField`
|`string` - Specify which field to use for suggestions

|`suggest_mode` or `suggestMode`
|`'missing' \| 'popular' \| 'always'` - Specify suggest mode +
_Default:_ `missing`

|`suggest_size` or `suggestSize`
|`number` - How many suggestions to return in response

|`suggest_text` or `suggestText`
|`string` - The source text for which the suggestions should be returned

|`timeout`
|`string` - Explicit operation timeout

|`track_scores` or `trackScores`
|`boolean` - Whether to calculate and return scores even if they are not used for sorting

|`track_total_hits` or `trackTotalHits`
|`boolean\|long` - Indicate if the number of documents that match the query should be tracked. A number can also be specified, to accurately track the total hit count up to the number.

|`allow_partial_search_results` or `allowPartialSearchResults`
|`boolean` - Indicate if an error should be returned if there is a partial search failure or timeout +
_Default:_ `true`

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`version`
|`boolean` - Specify whether to return document version as part of a hit

|`seq_no_primary_term` or `seqNoPrimaryTerm`
|`boolean` - Specify whether to return sequence number and primary term of the last modification of each hit

|`max_concurrent_shard_requests` or `maxConcurrentShardRequests`
|`number` - The number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests +
_Default:_ `5`

|`body`
|`object` - The search definition using the Query DSL

|===

=== autoscaling.deleteAutoscalingPolicy
*Stability:* experimental
[source,ts]
----
client.autoscaling.deleteAutoscalingPolicy({
  name: string
})
----
link:{ref}/autoscaling-delete-autoscaling-policy.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - the name of the autoscaling policy

|===

=== autoscaling.getAutoscalingDecision
*Stability:* experimental
[source,ts]
----
client.autoscaling.getAutoscalingDecision()
----
link:{ref}/autoscaling-get-autoscaling-decision.html[Documentation] +


=== autoscaling.getAutoscalingPolicy
*Stability:* experimental
[source,ts]
----
client.autoscaling.getAutoscalingPolicy({
  name: string
})
----
link:{ref}/autoscaling-get-autoscaling-policy.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - the name of the autoscaling policy

|===

=== autoscaling.putAutoscalingPolicy
*Stability:* experimental
[source,ts]
----
client.autoscaling.putAutoscalingPolicy({
  name: string,
  body: object
})
----
link:{ref}/autoscaling-put-autoscaling-policy.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - the name of the autoscaling policy

|`body`
|`object` - the specification of the autoscaling policy

|===

=== cat.mlDataFrameAnalytics

[source,ts]
----
client.cat.mlDataFrameAnalytics({
  id: string,
  allow_no_match: boolean,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no configs. (This includes `_all` string or when no configs have been specified)

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.mlDatafeeds

[source,ts]
----
client.cat.mlDatafeeds({
  datafeed_id: string,
  allow_no_datafeeds: boolean,
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-datafeeds.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeeds stats to fetch

|`allow_no_datafeeds` or `allowNoDatafeeds`
|`boolean` - Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.mlJobs

[source,ts]
----
client.cat.mlJobs({
  job_id: string,
  allow_no_jobs: boolean,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-anomaly-detectors.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the jobs stats to fetch

|`allow_no_jobs` or `allowNoJobs`
|`boolean` - Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.mlTrainedModels

[source,ts]
----
client.cat.mlTrainedModels({
  model_id: string,
  allow_no_match: boolean,
  from: number,
  size: number,
  bytes: 'b' | 'k' | 'kb' | 'm' | 'mb' | 'g' | 'gb' | 't' | 'tb' | 'p' | 'pb',
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-trained-model.html[Documentation] +
[cols=2*]
|===
|`model_id` or `modelId`
|`string` - The ID of the trained models stats to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no trained models. (This includes `_all` string or when no trained models have been specified) +
_Default:_ `true`

|`from`
|`number` - skips a number of trained models

|`size`
|`number` - specifies a max number of trained models to get +
_Default:_ `100`

|`bytes`
|`'b' \| 'k' \| 'kb' \| 'm' \| 'mb' \| 'g' \| 'gb' \| 't' \| 'tb' \| 'p' \| 'pb'` - The unit in which to display byte values

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== cat.transforms

[source,ts]
----
client.cat.transforms({
  transform_id: string,
  from: number,
  size: number,
  allow_no_match: boolean,
  format: string,
  h: string | string[],
  help: boolean,
  s: string | string[],
  time: 'd' | 'h' | 'm' | 's' | 'ms' | 'micros' | 'nanos',
  v: boolean
})
----
link:{ref}/cat-transforms.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform for which to get stats. '_all' or '*' implies all transforms

|`from`
|`number` - skips a number of transform configs, defaults to 0

|`size`
|`number` - specifies a max number of transforms to get, defaults to 100

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`h`
|`string \| string[]` - Comma-separated list of column names to display

|`help`
|`boolean` - Return help information

|`s`
|`string \| string[]` - Comma-separated list of column names or column aliases to sort by

|`time`
|`'d' \| 'h' \| 'm' \| 's' \| 'ms' \| 'micros' \| 'nanos'` - The unit in which to display time values

|`v`
|`boolean` - Verbose mode. Display column headers

|===

=== ccr.deleteAutoFollowPattern

[source,ts]
----
client.ccr.deleteAutoFollowPattern({
  name: string
})
----
link:{ref}/ccr-delete-auto-follow-pattern.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the auto follow pattern.

|===

=== ccr.follow

[source,ts]
----
client.ccr.follow({
  index: string,
  wait_for_active_shards: string,
  body: object
})
----
link:{ref}/ccr-put-follow.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the follower index

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of shard copies that must be active before returning. Defaults to 0. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1) +
_Default:_ `0`

|`body`
|`object` - The name of the leader index and other optional ccr related parameters

|===

=== ccr.followInfo

[source,ts]
----
client.ccr.followInfo({
  index: string | string[]
})
----
link:{ref}/ccr-get-follow-info.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index patterns; use `_all` to perform the operation on all indices

|===

=== ccr.followStats

[source,ts]
----
client.ccr.followStats({
  index: string | string[]
})
----
link:{ref}/ccr-get-follow-stats.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index patterns; use `_all` to perform the operation on all indices

|===

=== ccr.forgetFollower

[source,ts]
----
client.ccr.forgetFollower({
  index: string,
  body: object
})
----
link:{ref}/ccr-post-forget-follower.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - the name of the leader index for which specified follower retention leases should be removed

|`body`
|`object` - the name and UUID of the follower index, the name of the cluster containing the follower index, and the alias from the perspective of that cluster for the remote cluster containing the leader index

|===

=== ccr.getAutoFollowPattern

[source,ts]
----
client.ccr.getAutoFollowPattern({
  name: string
})
----
link:{ref}/ccr-get-auto-follow-pattern.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the auto follow pattern.

|===

=== ccr.pauseAutoFollowPattern

[source,ts]
----
client.ccr.pauseAutoFollowPattern({
  name: string
})
----
link:{ref}/ccr-pause-auto-follow-pattern.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the auto follow pattern that should pause discovering new indices to follow.

|===

=== ccr.pauseFollow

[source,ts]
----
client.ccr.pauseFollow({
  index: string
})
----
link:{ref}/ccr-post-pause-follow.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the follower index that should pause following its leader index.

|===

=== ccr.putAutoFollowPattern

[source,ts]
----
client.ccr.putAutoFollowPattern({
  name: string,
  body: object
})
----
link:{ref}/ccr-put-auto-follow-pattern.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the auto follow pattern.

|`body`
|`object` - The specification of the auto follow pattern

|===

=== ccr.resumeAutoFollowPattern

[source,ts]
----
client.ccr.resumeAutoFollowPattern({
  name: string
})
----
link:{ref}/ccr-resume-auto-follow-pattern.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the auto follow pattern to resume discovering new indices to follow.

|===

=== ccr.resumeFollow

[source,ts]
----
client.ccr.resumeFollow({
  index: string,
  body: object
})
----
link:{ref}/ccr-post-resume-follow.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the follow index to resume following.

|`body`
|`object` - The name of the leader index and other optional ccr related parameters

|===

=== ccr.stats

[source,ts]
----
client.ccr.stats()
----
link:{ref}/ccr-get-stats.html[Documentation] +


=== ccr.unfollow

[source,ts]
----
client.ccr.unfollow({
  index: string
})
----
link:{ref}/ccr-post-unfollow.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the follower index that should be turned into a regular index.

|===

=== dataFrameTransformDeprecated.deleteTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.deleteTransform({
  transform_id: string,
  force: boolean
})
----
link:{ref}/delete-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to delete

|`force`
|`boolean` - When `true`, the transform is deleted regardless of its current state. The default value is `false`, meaning that the transform must be `stopped` before it can be deleted.

|===

=== dataFrameTransformDeprecated.getTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.getTransform({
  transform_id: string,
  from: number,
  size: number,
  allow_no_match: boolean
})
----
link:{ref}/get-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id or comma delimited list of id expressions of the transforms to get, '_all' or '*' implies get all transforms

|`from`
|`number` - skips a number of transform configs, defaults to 0

|`size`
|`number` - specifies a max number of transforms to get, defaults to 100

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|===

=== dataFrameTransformDeprecated.getTransformStats
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.getTransformStats({
  transform_id: string,
  from: number,
  size: number,
  allow_no_match: boolean
})
----
link:{ref}/get-transform-stats.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform for which to get stats. '_all' or '*' implies all transforms

|`from`
|`number` - skips a number of transform stats, defaults to 0

|`size`
|`number` - specifies a max number of transform stats to get, defaults to 100

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|===

=== dataFrameTransformDeprecated.previewTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.previewTransform({
  body: object
})
----
link:{ref}/preview-transform.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The definition for the transform to preview

|===

=== dataFrameTransformDeprecated.putTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.putTransform({
  transform_id: string,
  defer_validation: boolean,
  body: object
})
----
link:{ref}/put-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the new transform.

|`defer_validation` or `deferValidation`
|`boolean` - If validations should be deferred until transform starts, defaults to false.

|`body`
|`object` - The transform definition

|===

=== dataFrameTransformDeprecated.startTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.startTransform({
  transform_id: string,
  timeout: string
})
----
link:{ref}/start-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to start

|`timeout`
|`string` - Controls the time to wait for the transform to start

|===

=== dataFrameTransformDeprecated.stopTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.stopTransform({
  transform_id: string,
  wait_for_completion: boolean,
  timeout: string,
  allow_no_match: boolean
})
----
link:{ref}/stop-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to stop

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Whether to wait for the transform to fully stop before returning or not. Default to false

|`timeout`
|`string` - Controls the time to wait until the transform has stopped. Default to 30 seconds

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|===

=== dataFrameTransformDeprecated.updateTransform
*Stability:* beta
[source,ts]
----
client.dataFrameTransformDeprecated.updateTransform({
  transform_id: string,
  defer_validation: boolean,
  body: object
})
----
link:{ref}/update-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform.

|`defer_validation` or `deferValidation`
|`boolean` - If validations should be deferred until transform starts, defaults to false.

|`body`
|`object` - The update transform definition

|===

=== enrich.deletePolicy

[source,ts]
----
client.enrich.deletePolicy({
  name: string
})
----
link:{ref}/delete-enrich-policy-api.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the enrich policy

|===

=== enrich.executePolicy

[source,ts]
----
client.enrich.executePolicy({
  name: string,
  wait_for_completion: boolean
})
----
link:{ref}/execute-enrich-policy-api.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the enrich policy

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should the request should block until the execution is complete. +
_Default:_ `true`

|===

=== enrich.getPolicy

[source,ts]
----
client.enrich.getPolicy({
  name: string | string[]
})
----
link:{ref}/get-enrich-policy-api.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of enrich policy names

|===

=== enrich.putPolicy

[source,ts]
----
client.enrich.putPolicy({
  name: string,
  body: object
})
----
link:{ref}/put-enrich-policy-api.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - The name of the enrich policy

|`body`
|`object` - The enrich policy to register

|===

=== enrich.stats

[source,ts]
----
client.enrich.stats()
----
link:{ref}/enrich-stats-api.html[Documentation] +


=== eql.delete
*Stability:* beta
[source,ts]
----
client.eql.delete({
  id: string
})
----
link:{ref}/eql-search-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The async search ID

|===

=== eql.get
*Stability:* beta
[source,ts]
----
client.eql.get({
  id: string,
  wait_for_completion_timeout: string,
  keep_alive: string
})
----
link:{ref}/eql-search-api.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The async search ID

|`wait_for_completion_timeout` or `waitForCompletionTimeout`
|`string` - Specify the time that the request should block waiting for the final response

|`keep_alive` or `keepAlive`
|`string` - Update the time interval in which the results (partial or final) for this search will be available +
_Default:_ `5d`

|===

=== eql.search
*Stability:* beta
[source,ts]
----
client.eql.search({
  index: string,
  wait_for_completion_timeout: string,
  keep_on_completion: boolean,
  keep_alive: string,
  body: object
})
----
link:{ref}/eql-search-api.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to scope the operation

|`wait_for_completion_timeout` or `waitForCompletionTimeout`
|`string` - Specify the time that the request should block waiting for the final response

|`keep_on_completion` or `keepOnCompletion`
|`boolean` - Control whether the response should be stored in the cluster if it completed within the provided [wait_for_completion] time (default: false)

|`keep_alive` or `keepAlive`
|`string` - Update the time interval in which the results (partial or final) for this search will be available +
_Default:_ `5d`

|`body`
|`object` - Eql request body. Use the `query` to limit the query scope.

|===

=== graph.explore

[source,ts]
----
client.graph.explore({
  index: string | string[],
  routing: string,
  timeout: string,
  body: object
})
----
link:{ref}/graph-explore-api.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices

|`routing`
|`string` - Specific routing value

|`timeout`
|`string` - Explicit operation timeout

|`body`
|`object` - Graph Query DSL

|===

=== ilm.deleteLifecycle

[source,ts]
----
client.ilm.deleteLifecycle({
  policy: string
})
----
link:{ref}/ilm-delete-lifecycle.html[Documentation] +
[cols=2*]
|===
|`policy`
|`string` - The name of the index lifecycle policy

|===

=== ilm.explainLifecycle

[source,ts]
----
client.ilm.explainLifecycle({
  index: string,
  only_managed: boolean,
  only_errors: boolean
})
----
link:{ref}/ilm-explain-lifecycle.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to explain

|`only_managed` or `onlyManaged`
|`boolean` - filters the indices included in the response to ones managed by ILM

|`only_errors` or `onlyErrors`
|`boolean` - filters the indices included in the response to ones in an ILM error state, implies only_managed

|===

=== ilm.getLifecycle

[source,ts]
----
client.ilm.getLifecycle({
  policy: string
})
----
link:{ref}/ilm-get-lifecycle.html[Documentation] +
[cols=2*]
|===
|`policy`
|`string` - The name of the index lifecycle policy

|===

=== ilm.getStatus

[source,ts]
----
client.ilm.getStatus()
----
link:{ref}/ilm-get-status.html[Documentation] +


=== ilm.moveToStep

[source,ts]
----
client.ilm.moveToStep({
  index: string,
  body: object
})
----
link:{ref}/ilm-move-to-step.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index whose lifecycle step is to change

|`body`
|`object` - The new lifecycle step to move to

|===

=== ilm.putLifecycle

[source,ts]
----
client.ilm.putLifecycle({
  policy: string,
  body: object
})
----
link:{ref}/ilm-put-lifecycle.html[Documentation] +
[cols=2*]
|===
|`policy`
|`string` - The name of the index lifecycle policy

|`body`
|`object` - The lifecycle policy definition to register

|===

=== ilm.removePolicy

[source,ts]
----
client.ilm.removePolicy({
  index: string
})
----
link:{ref}/ilm-remove-policy.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to remove policy on

|===

=== ilm.retry

[source,ts]
----
client.ilm.retry({
  index: string
})
----
link:{ref}/ilm-retry-policy.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the indices (comma-separated) whose failed lifecycle step is to be retry

|===

=== ilm.start

[source,ts]
----
client.ilm.start()
----
link:{ref}/ilm-start.html[Documentation] +


=== ilm.stop

[source,ts]
----
client.ilm.stop()
----
link:{ref}/ilm-stop.html[Documentation] +


=== indices.freeze

[source,ts]
----
client.indices.freeze({
  index: string,
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  wait_for_active_shards: string
})
----
link:{ref}/freeze-index-api.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to freeze

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `closed`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of active shards to wait for before the operation returns.

|===

=== indices.reloadSearchAnalyzers

[source,ts]
----
client.indices.reloadSearchAnalyzers({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all'
})
----
link:{ref}/indices-reload-analyzers.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names to reload analyzers for

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== indices.unfreeze

[source,ts]
----
client.indices.unfreeze({
  index: string,
  timeout: string,
  master_timeout: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  wait_for_active_shards: string
})
----
link:{ref}/unfreeze-index-api.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The name of the index to unfreeze

|`timeout`
|`string` - Explicit operation timeout

|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for connection to master

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `closed`

|`wait_for_active_shards` or `waitForActiveShards`
|`string` - Sets the number of active shards to wait for before the operation returns.

|===

=== license.delete

[source,ts]
----
client.license.delete()
----
link:{ref}/delete-license.html[Documentation] +


=== license.get

[source,ts]
----
client.license.get({
  local: boolean,
  accept_enterprise: boolean
})
----
link:{ref}/get-license.html[Documentation] +
[cols=2*]
|===
|`local`
|`boolean` - Return local information, do not retrieve the state from master node (default: false)

|`accept_enterprise` or `acceptEnterprise`
|`boolean` - Supported for backwards compatibility with 7.x. If this param is used it must be set to true +

WARNING: This parameter has been deprecated.

|===

=== license.getBasicStatus

[source,ts]
----
client.license.getBasicStatus()
----
link:{ref}/get-basic-status.html[Documentation] +


=== license.getTrialStatus

[source,ts]
----
client.license.getTrialStatus()
----
link:{ref}/get-trial-status.html[Documentation] +


=== license.post

[source,ts]
----
client.license.post({
  acknowledge: boolean,
  body: object
})
----
link:{ref}/update-license.html[Documentation] +
[cols=2*]
|===
|`acknowledge`
|`boolean` - whether the user has acknowledged acknowledge messages (default: false)

|`body`
|`object` - licenses to be installed

|===

=== license.postStartBasic

[source,ts]
----
client.license.postStartBasic({
  acknowledge: boolean
})
----
link:{ref}/start-basic.html[Documentation] +
[cols=2*]
|===
|`acknowledge`
|`boolean` - whether the user has acknowledged acknowledge messages (default: false)

|===

=== license.postStartTrial

[source,ts]
----
client.license.postStartTrial({
  type: string,
  acknowledge: boolean
})
----
link:{ref}/start-trial.html[Documentation] +
[cols=2*]
|===
|`type`
|`string` - The type of trial license to generate (default: "trial")

|`acknowledge`
|`boolean` - whether the user has acknowledged acknowledge messages (default: false)

|===

=== migration.deprecations

[source,ts]
----
client.migration.deprecations({
  index: string
})
----
link:{ref}/migration-api-deprecation.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - Index pattern

|===

=== ml.closeJob

[source,ts]
----
client.ml.closeJob({
  job_id: string,
  allow_no_jobs: boolean,
  force: boolean,
  timeout: string,
  body: object
})
----
link:{ref}/ml-close-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The name of the job to close

|`allow_no_jobs` or `allowNoJobs`
|`boolean` - Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)

|`force`
|`boolean` - True if the job should be forcefully closed

|`timeout`
|`string` - Controls the time to wait until a job has closed. Default to 30 minutes

|`body`
|`object` - The URL params optionally sent in the body

|===

=== ml.deleteCalendar

[source,ts]
----
client.ml.deleteCalendar({
  calendar_id: string
})
----
link:{ref}/ml-delete-calendar.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to delete

|===

=== ml.deleteCalendarEvent

[source,ts]
----
client.ml.deleteCalendarEvent({
  calendar_id: string,
  event_id: string
})
----
link:{ref}/ml-delete-calendar-event.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to modify

|`event_id` or `eventId`
|`string` - The ID of the event to remove from the calendar

|===

=== ml.deleteCalendarJob

[source,ts]
----
client.ml.deleteCalendarJob({
  calendar_id: string,
  job_id: string
})
----
link:{ref}/ml-delete-calendar-job.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to modify

|`job_id` or `jobId`
|`string` - The ID of the job to remove from the calendar

|===

=== ml.deleteDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.deleteDataFrameAnalytics({
  id: string,
  force: boolean,
  timeout: string
})
----
link:{ref}/delete-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to delete

|`force`
|`boolean` - True if the job should be forcefully deleted

|`timeout`
|`string` - Controls the time to wait until a job is deleted. Defaults to 1 minute

|===

=== ml.deleteDatafeed

[source,ts]
----
client.ml.deleteDatafeed({
  datafeed_id: string,
  force: boolean
})
----
link:{ref}/ml-delete-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to delete

|`force`
|`boolean` - True if the datafeed should be forcefully deleted

|===

=== ml.deleteExpiredData

[source,ts]
----
client.ml.deleteExpiredData({
  job_id: string,
  requests_per_second: number,
  timeout: string,
  body: object
})
----
link:{ref}/ml-delete-expired-data.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job(s) to perform expired data hygiene for

|`requests_per_second` or `requestsPerSecond`
|`number` - The desired requests per second for the deletion processes.

|`timeout`
|`string` - How long can the underlying delete processes run until they are canceled

|`body`
|`object` - deleting expired data parameters

|===

=== ml.deleteFilter

[source,ts]
----
client.ml.deleteFilter({
  filter_id: string
})
----
link:{ref}/ml-delete-filter.html[Documentation] +
[cols=2*]
|===
|`filter_id` or `filterId`
|`string` - The ID of the filter to delete

|===

=== ml.deleteForecast

[source,ts]
----
client.ml.deleteForecast({
  job_id: string,
  forecast_id: string,
  allow_no_forecasts: boolean,
  timeout: string
})
----
link:{ref}/ml-delete-forecast.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job from which to delete forecasts

|`forecast_id` or `forecastId`
|`string` - The ID of the forecast to delete, can be comma delimited list. Leaving blank implies `_all`

|`allow_no_forecasts` or `allowNoForecasts`
|`boolean` - Whether to ignore if `_all` matches no forecasts

|`timeout`
|`string` - Controls the time to wait until the forecast(s) are deleted. Default to 30 seconds

|===

=== ml.deleteJob

[source,ts]
----
client.ml.deleteJob({
  job_id: string,
  force: boolean,
  wait_for_completion: boolean
})
----
link:{ref}/ml-delete-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to delete

|`force`
|`boolean` - True if the job should be forcefully deleted

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should this request wait until the operation has completed before returning +
_Default:_ `true`

|===

=== ml.deleteModelSnapshot

[source,ts]
----
client.ml.deleteModelSnapshot({
  job_id: string,
  snapshot_id: string
})
----
link:{ref}/ml-delete-snapshot.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to fetch

|`snapshot_id` or `snapshotId`
|`string` - The ID of the snapshot to delete

|===

=== ml.deleteTrainedModel
*Stability:* experimental
[source,ts]
----
client.ml.deleteTrainedModel({
  model_id: string
})
----
link:{ref}/delete-inference.html[Documentation] +
[cols=2*]
|===
|`model_id` or `modelId`
|`string` - The ID of the trained model to delete

|===

=== ml.estimateModelMemory

[source,ts]
----
client.ml.estimateModelMemory({
  body: object
})
----
link:{ref}/ml-apis.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The analysis config, plus cardinality estimates for fields it references

|===

=== ml.evaluateDataFrame
*Stability:* experimental
[source,ts]
----
client.ml.evaluateDataFrame({
  body: object
})
----
link:{ref}/evaluate-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The evaluation definition

|===

=== ml.explainDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.explainDataFrameAnalytics({
  id: string,
  body: object
})
----
link:{ref}/explain-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to explain

|`body`
|`object` - The data frame analytics config to explain

|===

=== ml.findFileStructure
*Stability:* experimental
[source,ts]
----
client.ml.findFileStructure({
  lines_to_sample: number,
  line_merge_size_limit: number,
  timeout: string,
  charset: string,
  format: 'ndjson' | 'xml' | 'delimited' | 'semi_structured_text',
  has_header_row: boolean,
  column_names: string | string[],
  delimiter: string,
  quote: string,
  should_trim_fields: boolean,
  grok_pattern: string,
  timestamp_field: string,
  timestamp_format: string,
  explain: boolean,
  body: object
})
----
link:{ref}/ml-find-file-structure.html[Documentation] +
[cols=2*]
|===
|`lines_to_sample` or `linesToSample`
|`number` - How many lines of the file should be included in the analysis +
_Default:_ `1000`

|`line_merge_size_limit` or `lineMergeSizeLimit`
|`number` - Maximum number of characters permitted in a single message when lines are merged to create messages. +
_Default:_ `10000`

|`timeout`
|`string` - Timeout after which the analysis will be aborted +
_Default:_ `25s`

|`charset`
|`string` - Optional parameter to specify the character set of the file

|`format`
|`'ndjson' \| 'xml' \| 'delimited' \| 'semi_structured_text'` - Optional parameter to specify the high level file format

|`has_header_row` or `hasHeaderRow`
|`boolean` - Optional parameter to specify whether a delimited file includes the column names in its first row

|`column_names` or `columnNames`
|`string \| string[]` - Optional parameter containing a comma separated list of the column names for a delimited file

|`delimiter`
|`string` - Optional parameter to specify the delimiter character for a delimited file - must be a single character

|`quote`
|`string` - Optional parameter to specify the quote character for a delimited file - must be a single character

|`should_trim_fields` or `shouldTrimFields`
|`boolean` - Optional parameter to specify whether the values between delimiters in a delimited file should have whitespace trimmed from them

|`grok_pattern` or `grokPattern`
|`string` - Optional parameter to specify the Grok pattern that should be used to extract fields from messages in a semi-structured text file

|`timestamp_field` or `timestampField`
|`string` - Optional parameter to specify the timestamp field in the file

|`timestamp_format` or `timestampFormat`
|`string` - Optional parameter to specify the timestamp format in the file - may be either a Joda or Java time format

|`explain`
|`boolean` - Whether to include a commentary on how the structure was derived

|`body`
|`object` - The contents of the file to be analyzed

|===

=== ml.flushJob

[source,ts]
----
client.ml.flushJob({
  job_id: string,
  calc_interim: boolean,
  start: string,
  end: string,
  advance_time: string,
  skip_time: string,
  body: object
})
----
link:{ref}/ml-flush-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The name of the job to flush

|`calc_interim` or `calcInterim`
|`boolean` - Calculates interim results for the most recent bucket or all buckets within the latency period

|`start`
|`string` - When used in conjunction with calc_interim, specifies the range of buckets on which to calculate interim results

|`end`
|`string` - When used in conjunction with calc_interim, specifies the range of buckets on which to calculate interim results

|`advance_time` or `advanceTime`
|`string` - Advances time to the given value generating results and updating the model for the advanced interval

|`skip_time` or `skipTime`
|`string` - Skips time to the given value without generating results or updating the model for the skipped interval

|`body`
|`object` - Flush parameters

|===

=== ml.forecast

[source,ts]
----
client.ml.forecast({
  job_id: string,
  duration: string,
  expires_in: string,
  max_model_memory: string
})
----
link:{ref}/ml-forecast.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to forecast for

|`duration`
|`string` - The duration of the forecast

|`expires_in` or `expiresIn`
|`string` - The time interval after which the forecast expires. Expired forecasts will be deleted at the first opportunity.

|`max_model_memory` or `maxModelMemory`
|`string` - The max memory able to be used by the forecast. Default is 20mb.

|===

=== ml.getBuckets

[source,ts]
----
client.ml.getBuckets({
  job_id: string,
  timestamp: string,
  expand: boolean,
  exclude_interim: boolean,
  from: number,
  size: number,
  start: string,
  end: string,
  anomaly_score: number,
  sort: string,
  desc: boolean,
  body: object
})
----
link:{ref}/ml-get-bucket.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - ID of the job to get bucket results from

|`timestamp`
|`string` - The timestamp of the desired single bucket result

|`expand`
|`boolean` - Include anomaly records

|`exclude_interim` or `excludeInterim`
|`boolean` - Exclude interim results

|`from`
|`number` - skips a number of buckets

|`size`
|`number` - specifies a max number of buckets to get

|`start`
|`string` - Start time filter for buckets

|`end`
|`string` - End time filter for buckets

|`anomaly_score` or `anomalyScore`
|`number` - Filter for the most anomalous buckets

|`sort`
|`string` - Sort buckets by a particular field

|`desc`
|`boolean` - Set the sort direction

|`body`
|`object` - Bucket selection details if not provided in URI

|===

=== ml.getCalendarEvents

[source,ts]
----
client.ml.getCalendarEvents({
  calendar_id: string,
  job_id: string,
  start: string,
  end: string,
  from: number,
  size: number
})
----
link:{ref}/ml-get-calendar-event.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar containing the events

|`job_id` or `jobId`
|`string` - Get events for the job. When this option is used calendar_id must be '_all'

|`start`
|`string` - Get events after this time

|`end`
|`string` - Get events before this time

|`from`
|`number` - Skips a number of events

|`size`
|`number` - Specifies a max number of events to get

|===

=== ml.getCalendars

[source,ts]
----
client.ml.getCalendars({
  calendar_id: string,
  from: number,
  size: number,
  body: object
})
----
link:{ref}/ml-get-calendar.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to fetch

|`from`
|`number` - skips a number of calendars

|`size`
|`number` - specifies a max number of calendars to get

|`body`
|`object` - The from and size parameters optionally sent in the body

|===

=== ml.getCategories

[source,ts]
----
client.ml.getCategories({
  job_id: string,
  category_id: number,
  from: number,
  size: number,
  partition_field_value: string,
  body: object
})
----
link:{ref}/ml-get-category.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The name of the job

|`category_id` or `categoryId`
|`number` - The identifier of the category definition of interest

|`from`
|`number` - skips a number of categories

|`size`
|`number` - specifies a max number of categories to get

|`partition_field_value` or `partitionFieldValue`
|`string` - Specifies the partition to retrieve categories for. This is optional, and should never be used for jobs where per-partition categorization is disabled.

|`body`
|`object` - Category selection details if not provided in URI

|===

=== ml.getDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.getDataFrameAnalytics({
  id: string,
  allow_no_match: boolean,
  from: number,
  size: number
})
----
link:{ref}/get-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified) +
_Default:_ `true`

|`from`
|`number` - skips a number of analytics

|`size`
|`number` - specifies a max number of analytics to get +
_Default:_ `100`

|===

=== ml.getDataFrameAnalyticsStats
*Stability:* experimental
[source,ts]
----
client.ml.getDataFrameAnalyticsStats({
  id: string,
  allow_no_match: boolean,
  from: number,
  size: number
})
----
link:{ref}/get-dfanalytics-stats.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics stats to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified) +
_Default:_ `true`

|`from`
|`number` - skips a number of analytics

|`size`
|`number` - specifies a max number of analytics to get +
_Default:_ `100`

|===

=== ml.getDatafeedStats

[source,ts]
----
client.ml.getDatafeedStats({
  datafeed_id: string,
  allow_no_datafeeds: boolean
})
----
link:{ref}/ml-get-datafeed-stats.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeeds stats to fetch

|`allow_no_datafeeds` or `allowNoDatafeeds`
|`boolean` - Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)

|===

=== ml.getDatafeeds

[source,ts]
----
client.ml.getDatafeeds({
  datafeed_id: string,
  allow_no_datafeeds: boolean
})
----
link:{ref}/ml-get-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeeds to fetch

|`allow_no_datafeeds` or `allowNoDatafeeds`
|`boolean` - Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)

|===

=== ml.getFilters

[source,ts]
----
client.ml.getFilters({
  filter_id: string,
  from: number,
  size: number
})
----
link:{ref}/ml-get-filter.html[Documentation] +
[cols=2*]
|===
|`filter_id` or `filterId`
|`string` - The ID of the filter to fetch

|`from`
|`number` - skips a number of filters

|`size`
|`number` - specifies a max number of filters to get

|===

=== ml.getInfluencers

[source,ts]
----
client.ml.getInfluencers({
  job_id: string,
  exclude_interim: boolean,
  from: number,
  size: number,
  start: string,
  end: string,
  influencer_score: number,
  sort: string,
  desc: boolean,
  body: object
})
----
link:{ref}/ml-get-influencer.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - Identifier for the anomaly detection job

|`exclude_interim` or `excludeInterim`
|`boolean` - Exclude interim results

|`from`
|`number` - skips a number of influencers

|`size`
|`number` - specifies a max number of influencers to get

|`start`
|`string` - start timestamp for the requested influencers

|`end`
|`string` - end timestamp for the requested influencers

|`influencer_score` or `influencerScore`
|`number` - influencer score threshold for the requested influencers

|`sort`
|`string` - sort field for the requested influencers

|`desc`
|`boolean` - whether the results should be sorted in decending order

|`body`
|`object` - Influencer selection criteria

|===

=== ml.getJobStats

[source,ts]
----
client.ml.getJobStats({
  job_id: string,
  allow_no_jobs: boolean
})
----
link:{ref}/ml-get-job-stats.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the jobs stats to fetch

|`allow_no_jobs` or `allowNoJobs`
|`boolean` - Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)

|===

=== ml.getJobs

[source,ts]
----
client.ml.getJobs({
  job_id: string,
  allow_no_jobs: boolean
})
----
link:{ref}/ml-get-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the jobs to fetch

|`allow_no_jobs` or `allowNoJobs`
|`boolean` - Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)

|===

=== ml.getModelSnapshots

[source,ts]
----
client.ml.getModelSnapshots({
  job_id: string,
  snapshot_id: string,
  from: number,
  size: number,
  start: string,
  end: string,
  sort: string,
  desc: boolean,
  body: object
})
----
link:{ref}/ml-get-snapshot.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to fetch

|`snapshot_id` or `snapshotId`
|`string` - The ID of the snapshot to fetch

|`from`
|`number` - Skips a number of documents

|`size`
|`number` - The default number of documents returned in queries as a string.

|`start`
|`string` - The filter 'start' query parameter

|`end`
|`string` - The filter 'end' query parameter

|`sort`
|`string` - Name of the field to sort on

|`desc`
|`boolean` - True if the results should be sorted in descending order

|`body`
|`object` - Model snapshot selection criteria

|===

=== ml.getOverallBuckets

[source,ts]
----
client.ml.getOverallBuckets({
  job_id: string,
  top_n: number,
  bucket_span: string,
  overall_score: number,
  exclude_interim: boolean,
  start: string,
  end: string,
  allow_no_jobs: boolean,
  body: object
})
----
link:{ref}/ml-get-overall-buckets.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The job IDs for which to calculate overall bucket results

|`top_n` or `topN`
|`number` - The number of top job bucket scores to be used in the overall_score calculation

|`bucket_span` or `bucketSpan`
|`string` - The span of the overall buckets. Defaults to the longest job bucket_span

|`overall_score` or `overallScore`
|`number` - Returns overall buckets with overall scores higher than this value

|`exclude_interim` or `excludeInterim`
|`boolean` - If true overall buckets that include interim buckets will be excluded

|`start`
|`string` - Returns overall buckets with timestamps after this time

|`end`
|`string` - Returns overall buckets with timestamps earlier than this time

|`allow_no_jobs` or `allowNoJobs`
|`boolean` - Whether to ignore if a wildcard expression matches no jobs. (This includes `_all` string or when no jobs have been specified)

|`body`
|`object` - Overall bucket selection details if not provided in URI

|===

=== ml.getRecords

[source,ts]
----
client.ml.getRecords({
  job_id: string,
  exclude_interim: boolean,
  from: number,
  size: number,
  start: string,
  end: string,
  record_score: number,
  sort: string,
  desc: boolean,
  body: object
})
----
link:{ref}/ml-get-record.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job

|`exclude_interim` or `excludeInterim`
|`boolean` - Exclude interim results

|`from`
|`number` - skips a number of records

|`size`
|`number` - specifies a max number of records to get

|`start`
|`string` - Start time filter for records

|`end`
|`string` - End time filter for records

|`record_score` or `recordScore`
|`number` - Returns records with anomaly scores greater or equal than this value

|`sort`
|`string` - Sort records by a particular field

|`desc`
|`boolean` - Set the sort direction

|`body`
|`object` - Record selection criteria

|===

=== ml.getTrainedModels
*Stability:* experimental
[source,ts]
----
client.ml.getTrainedModels({
  model_id: string,
  allow_no_match: boolean,
  include_model_definition: boolean,
  decompress_definition: boolean,
  from: number,
  size: number,
  tags: string | string[],
  for_export: boolean
})
----
link:{ref}/get-inference.html[Documentation] +
[cols=2*]
|===
|`model_id` or `modelId`
|`string` - The ID of the trained models to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no trained models. (This includes `_all` string or when no trained models have been specified) +
_Default:_ `true`

|`include_model_definition` or `includeModelDefinition`
|`boolean` - Should the full model definition be included in the results. These definitions can be large. So be cautious when including them. Defaults to false.

|`decompress_definition` or `decompressDefinition`
|`boolean` - Should the model definition be decompressed into valid JSON or returned in a custom compressed format. Defaults to true. +
_Default:_ `true`

|`from`
|`number` - skips a number of trained models

|`size`
|`number` - specifies a max number of trained models to get +
_Default:_ `100`

|`tags`
|`string \| string[]` - A comma-separated list of tags that the model must have.

|`for_export` or `forExport`
|`boolean` - Omits fields that are illegal to set on model PUT

|===

=== ml.getTrainedModelsStats
*Stability:* experimental
[source,ts]
----
client.ml.getTrainedModelsStats({
  model_id: string,
  allow_no_match: boolean,
  from: number,
  size: number
})
----
link:{ref}/get-inference-stats.html[Documentation] +
[cols=2*]
|===
|`model_id` or `modelId`
|`string` - The ID of the trained models stats to fetch

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no trained models. (This includes `_all` string or when no trained models have been specified) +
_Default:_ `true`

|`from`
|`number` - skips a number of trained models

|`size`
|`number` - specifies a max number of trained models to get +
_Default:_ `100`

|===

=== ml.info

[source,ts]
----
client.ml.info()
----
link:{ref}/get-ml-info.html[Documentation] +


=== ml.openJob

[source,ts]
----
client.ml.openJob({
  job_id: string
})
----
link:{ref}/ml-open-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to open

|===

=== ml.postCalendarEvents

[source,ts]
----
client.ml.postCalendarEvents({
  calendar_id: string,
  body: object
})
----
link:{ref}/ml-post-calendar-event.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to modify

|`body`
|`object` - A list of events

|===

=== ml.postData

[source,ts]
----
client.ml.postData({
  job_id: string,
  reset_start: string,
  reset_end: string,
  body: object
})
----
link:{ref}/ml-post-data.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The name of the job receiving the data

|`reset_start` or `resetStart`
|`string` - Optional parameter to specify the start of the bucket resetting range

|`reset_end` or `resetEnd`
|`string` - Optional parameter to specify the end of the bucket resetting range

|`body`
|`object` - The data to process

|===

=== ml.previewDatafeed

[source,ts]
----
client.ml.previewDatafeed({
  datafeed_id: string
})
----
link:{ref}/ml-preview-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to preview

|===

=== ml.putCalendar

[source,ts]
----
client.ml.putCalendar({
  calendar_id: string,
  body: object
})
----
link:{ref}/ml-put-calendar.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to create

|`body`
|`object` - The calendar details

|===

=== ml.putCalendarJob

[source,ts]
----
client.ml.putCalendarJob({
  calendar_id: string,
  job_id: string
})
----
link:{ref}/ml-put-calendar-job.html[Documentation] +
[cols=2*]
|===
|`calendar_id` or `calendarId`
|`string` - The ID of the calendar to modify

|`job_id` or `jobId`
|`string` - The ID of the job to add to the calendar

|===

=== ml.putDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.putDataFrameAnalytics({
  id: string,
  body: object
})
----
link:{ref}/put-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to create

|`body`
|`object` - The data frame analytics configuration

|===

=== ml.putDatafeed

[source,ts]
----
client.ml.putDatafeed({
  datafeed_id: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  ignore_throttled: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  body: object
})
----
link:{ref}/ml-put-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to create

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Ignore unavailable indexes (default: false)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Ignore if the source indices expressions resolves to no concrete indices (default: true)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Ignore indices that are marked as throttled (default: true)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether source index expressions should get expanded to open or closed indices (default: open)

|`body`
|`object` - The datafeed config

|===

=== ml.putFilter

[source,ts]
----
client.ml.putFilter({
  filter_id: string,
  body: object
})
----
link:{ref}/ml-put-filter.html[Documentation] +
[cols=2*]
|===
|`filter_id` or `filterId`
|`string` - The ID of the filter to create

|`body`
|`object` - The filter details

|===

=== ml.putJob

[source,ts]
----
client.ml.putJob({
  job_id: string,
  body: object
})
----
link:{ref}/ml-put-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to create

|`body`
|`object` - The job

|===

=== ml.putTrainedModel
*Stability:* experimental
[source,ts]
----
client.ml.putTrainedModel({
  model_id: string,
  body: object
})
----
link:{ref}/put-inference.html[Documentation] +
[cols=2*]
|===
|`model_id` or `modelId`
|`string` - The ID of the trained models to store

|`body`
|`object` - The trained model configuration

|===

=== ml.revertModelSnapshot

[source,ts]
----
client.ml.revertModelSnapshot({
  job_id: string,
  snapshot_id: string,
  delete_intervening_results: boolean,
  body: object
})
----
link:{ref}/ml-revert-snapshot.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to fetch

|`snapshot_id` or `snapshotId`
|`string` - The ID of the snapshot to revert to

|`delete_intervening_results` or `deleteInterveningResults`
|`boolean` - Should we reset the results back to the time of the snapshot?

|`body`
|`object` - Reversion options

|===

=== ml.setUpgradeMode

[source,ts]
----
client.ml.setUpgradeMode({
  enabled: boolean,
  timeout: string
})
----
link:{ref}/ml-set-upgrade-mode.html[Documentation] +
[cols=2*]
|===
|`enabled`
|`boolean` - Whether to enable upgrade_mode ML setting or not. Defaults to false.

|`timeout`
|`string` - Controls the time to wait before action times out. Defaults to 30 seconds

|===

=== ml.startDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.startDataFrameAnalytics({
  id: string,
  timeout: string,
  body: object
})
----
link:{ref}/start-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to start

|`timeout`
|`string` - Controls the time to wait until the task has started. Defaults to 20 seconds

|`body`
|`object` - The start data frame analytics parameters

|===

=== ml.startDatafeed

[source,ts]
----
client.ml.startDatafeed({
  datafeed_id: string,
  start: string,
  end: string,
  timeout: string,
  body: object
})
----
link:{ref}/ml-start-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to start

|`start`
|`string` - The start time from where the datafeed should begin

|`end`
|`string` - The end time when the datafeed should stop. When not set, the datafeed continues in real time

|`timeout`
|`string` - Controls the time to wait until a datafeed has started. Default to 20 seconds

|`body`
|`object` - The start datafeed parameters

|===

=== ml.stopDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.stopDataFrameAnalytics({
  id: string,
  allow_no_match: boolean,
  force: boolean,
  timeout: string,
  body: object
})
----
link:{ref}/stop-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to stop

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no data frame analytics. (This includes `_all` string or when no data frame analytics have been specified)

|`force`
|`boolean` - True if the data frame analytics should be forcefully stopped

|`timeout`
|`string` - Controls the time to wait until the task has stopped. Defaults to 20 seconds

|`body`
|`object` - The stop data frame analytics parameters

|===

=== ml.stopDatafeed

[source,ts]
----
client.ml.stopDatafeed({
  datafeed_id: string,
  allow_no_datafeeds: boolean,
  force: boolean,
  timeout: string
})
----
link:{ref}/ml-stop-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to stop

|`allow_no_datafeeds` or `allowNoDatafeeds`
|`boolean` - Whether to ignore if a wildcard expression matches no datafeeds. (This includes `_all` string or when no datafeeds have been specified)

|`force`
|`boolean` - True if the datafeed should be forcefully stopped.

|`timeout`
|`string` - Controls the time to wait until a datafeed has stopped. Default to 20 seconds

|===

=== ml.updateDataFrameAnalytics
*Stability:* experimental
[source,ts]
----
client.ml.updateDataFrameAnalytics({
  id: string,
  body: object
})
----
link:{ref}/update-dfanalytics.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the data frame analytics to update

|`body`
|`object` - The data frame analytics settings to update

|===

=== ml.updateDatafeed

[source,ts]
----
client.ml.updateDatafeed({
  datafeed_id: string,
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  ignore_throttled: boolean,
  expand_wildcards: 'open' | 'closed' | 'hidden' | 'none' | 'all',
  body: object
})
----
link:{ref}/ml-update-datafeed.html[Documentation] +
[cols=2*]
|===
|`datafeed_id` or `datafeedId`
|`string` - The ID of the datafeed to update

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Ignore unavailable indexes (default: false)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Ignore if the source indices expressions resolves to no concrete indices (default: true)

|`ignore_throttled` or `ignoreThrottled`
|`boolean` - Ignore indices that are marked as throttled (default: true)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'hidden' \| 'none' \| 'all'` - Whether source index expressions should get expanded to open or closed indices (default: open)

|`body`
|`object` - The datafeed update settings

|===

=== ml.updateFilter

[source,ts]
----
client.ml.updateFilter({
  filter_id: string,
  body: object
})
----
link:{ref}/ml-update-filter.html[Documentation] +
[cols=2*]
|===
|`filter_id` or `filterId`
|`string` - The ID of the filter to update

|`body`
|`object` - The filter update

|===

=== ml.updateJob

[source,ts]
----
client.ml.updateJob({
  job_id: string,
  body: object
})
----
link:{ref}/ml-update-job.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to create

|`body`
|`object` - The job update settings

|===

=== ml.updateModelSnapshot

[source,ts]
----
client.ml.updateModelSnapshot({
  job_id: string,
  snapshot_id: string,
  body: object
})
----
link:{ref}/ml-update-snapshot.html[Documentation] +
[cols=2*]
|===
|`job_id` or `jobId`
|`string` - The ID of the job to fetch

|`snapshot_id` or `snapshotId`
|`string` - The ID of the snapshot to update

|`body`
|`object` - The model snapshot properties to update

|===

=== ml.validate

[source,ts]
----
client.ml.validate({
  body: object
})
----
link:https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The job config

|===

=== ml.validateDetector

[source,ts]
----
client.ml.validateDetector({
  body: object
})
----
link:https://www.elastic.co/guide/en/machine-learning/current/ml-jobs.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The detector

|===

=== monitoring.bulk
*Stability:* experimental
[source,ts]
----
client.monitoring.bulk({
  type: string,
  system_id: string,
  system_api_version: string,
  interval: string,
  body: object
})
----
link:{ref}/monitor-elasticsearch-cluster.html[Documentation] +
[cols=2*]
|===
|`type`
|`string` - Default document type for items which don't provide one +

WARNING: This parameter has been deprecated.

|`system_id` or `systemId`
|`string` - Identifier of the monitored system

|`system_api_version` or `systemApiVersion`
|`string` - API Version of the monitored system

|`interval`
|`string` - Collection interval (e.g., '10s' or '10000ms') of the payload

|`body`
|`object` - The operation definition and data (action-data pairs), separated by newlines

|===

=== rollup.deleteJob
*Stability:* experimental
[source,ts]
----
client.rollup.deleteJob({
  id: string
})
----
link:{ref}/rollup-delete-job.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the job to delete

|===

=== rollup.getJobs
*Stability:* experimental
[source,ts]
----
client.rollup.getJobs({
  id: string
})
----
link:{ref}/rollup-get-job.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the job(s) to fetch. Accepts glob patterns, or left blank for all jobs

|===

=== rollup.getRollupCaps
*Stability:* experimental
[source,ts]
----
client.rollup.getRollupCaps({
  id: string
})
----
link:{ref}/rollup-get-rollup-caps.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the index to check rollup capabilities on, or left blank for all jobs

|===

=== rollup.getRollupIndexCaps
*Stability:* experimental
[source,ts]
----
client.rollup.getRollupIndexCaps({
  index: string
})
----
link:{ref}/rollup-get-rollup-index-caps.html[Documentation] +
[cols=2*]
|===
|`index`
|`string` - The rollup index or index pattern to obtain rollup capabilities from.

|===

=== rollup.putJob
*Stability:* experimental
[source,ts]
----
client.rollup.putJob({
  id: string,
  body: object
})
----
link:{ref}/rollup-put-job.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the job to create

|`body`
|`object` - The job configuration

|===

=== rollup.rollupSearch
*Stability:* experimental
[source,ts]
----
client.rollup.rollupSearch({
  index: string | string[],
  type: string,
  typed_keys: boolean,
  rest_total_hits_as_int: boolean,
  body: object
})
----
link:{ref}/rollup-search.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - The indices or index-pattern(s) (containing rollup or regular data) that should be searched

|`type`
|`string` - The doc type inside the index +

WARNING: This parameter has been deprecated.

|`typed_keys` or `typedKeys`
|`boolean` - Specify whether aggregation and suggester names should be prefixed by their respective types in the response

|`rest_total_hits_as_int` or `restTotalHitsAsInt`
|`boolean` - Indicates whether hits.total should be rendered as an integer or an object in the rest search response

|`body`
|`object` - The search request body

|===

=== rollup.startJob
*Stability:* experimental
[source,ts]
----
client.rollup.startJob({
  id: string
})
----
link:{ref}/rollup-start-job.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the job to start

|===

=== rollup.stopJob
*Stability:* experimental
[source,ts]
----
client.rollup.stopJob({
  id: string,
  wait_for_completion: boolean,
  timeout: string
})
----
link:{ref}/rollup-stop-job.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - The ID of the job to stop

|`wait_for_completion` or `waitForCompletion`
|`boolean` - True if the API should block until the job has fully stopped, false if should be executed async. Defaults to false.

|`timeout`
|`string` - Block for (at maximum) the specified duration while waiting for the job to stop.  Defaults to 30s.

|===

=== searchableSnapshots.clearCache
*Stability:* experimental
[source,ts]
----
client.searchableSnapshots.clearCache({
  index: string | string[],
  ignore_unavailable: boolean,
  allow_no_indices: boolean,
  expand_wildcards: 'open' | 'closed' | 'none' | 'all'
})
----
link:{ref}/searchable-snapshots-api-clear-cache.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names

|`ignore_unavailable` or `ignoreUnavailable`
|`boolean` - Whether specified concrete indices should be ignored when unavailable (missing or closed)

|`allow_no_indices` or `allowNoIndices`
|`boolean` - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)

|`expand_wildcards` or `expandWildcards`
|`'open' \| 'closed' \| 'none' \| 'all'` - Whether to expand wildcard expression to concrete indices that are open, closed or both. +
_Default:_ `open`

|===

=== searchableSnapshots.mount
*Stability:* experimental
[source,ts]
----
client.searchableSnapshots.mount({
  repository: string,
  snapshot: string,
  master_timeout: string,
  wait_for_completion: boolean,
  body: object
})
----
link:{ref}/searchable-snapshots-api-mount-snapshot.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - The name of the repository containing the snapshot of the index to mount

|`snapshot`
|`string` - The name of the snapshot of the index to mount

|`master_timeout` or `masterTimeout`
|`string` - Explicit operation timeout for connection to master node

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Should this request wait until the operation has completed before returning

|`body`
|`object` - The restore configuration for mounting the snapshot as searchable

|===

=== searchableSnapshots.repositoryStats
*Stability:* experimental
[source,ts]
----
client.searchableSnapshots.repositoryStats({
  repository: string
})
----
link:{ref}/searchable-snapshots-repository-stats.html[Documentation] +
[cols=2*]
|===
|`repository`
|`string` - The repository for which to get the stats for

|===

=== searchableSnapshots.stats
*Stability:* experimental
[source,ts]
----
client.searchableSnapshots.stats({
  index: string | string[]
})
----
link:{ref}/searchable-snapshots-api-stats.html[Documentation] +
[cols=2*]
|===
|`index`
|`string \| string[]` - A comma-separated list of index names

|===

=== security.authenticate

[source,ts]
----
client.security.authenticate()
----
link:{ref}/security-api-authenticate.html[Documentation] +


=== security.changePassword

[source,ts]
----
client.security.changePassword({
  username: string,
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-change-password.html[Documentation] +
[cols=2*]
|===
|`username`
|`string` - The username of the user to change the password for

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - the new password for the user

|===

=== security.clearCachedPrivileges

[source,ts]
----
client.security.clearCachedPrivileges({
  application: string | string[]
})
----
link:{ref}/security-api-clear-privilege-cache.html[Documentation] +
[cols=2*]
|===
|`application`
|`string \| string[]` - A comma-separated list of application names

|===

=== security.clearCachedRealms

[source,ts]
----
client.security.clearCachedRealms({
  realms: string | string[],
  usernames: string | string[]
})
----
link:{ref}/security-api-clear-cache.html[Documentation] +
[cols=2*]
|===
|`realms`
|`string \| string[]` - Comma-separated list of realms to clear

|`usernames`
|`string \| string[]` - Comma-separated list of usernames to clear from the cache

|===

=== security.clearCachedRoles

[source,ts]
----
client.security.clearCachedRoles({
  name: string | string[]
})
----
link:{ref}/security-api-clear-role-cache.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - Role name

|===

=== security.createApiKey

[source,ts]
----
client.security.createApiKey({
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-create-api-key.html[Documentation] +
[cols=2*]
|===
|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - The api key request to create an API key

|===

=== security.deletePrivileges

[source,ts]
----
client.security.deletePrivileges({
  application: string,
  name: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-delete-privilege.html[Documentation] +
[cols=2*]
|===
|`application`
|`string` - Application name

|`name`
|`string` - Privilege name

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.deleteRole

[source,ts]
----
client.security.deleteRole({
  name: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-delete-role.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - Role name

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.deleteRoleMapping

[source,ts]
----
client.security.deleteRoleMapping({
  name: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-delete-role-mapping.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - Role-mapping name

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.deleteUser

[source,ts]
----
client.security.deleteUser({
  username: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-delete-user.html[Documentation] +
[cols=2*]
|===
|`username`
|`string` - username

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.disableUser

[source,ts]
----
client.security.disableUser({
  username: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-disable-user.html[Documentation] +
[cols=2*]
|===
|`username`
|`string` - The username of the user to disable

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.enableUser

[source,ts]
----
client.security.enableUser({
  username: string,
  refresh: 'true' | 'false' | 'wait_for'
})
----
link:{ref}/security-api-enable-user.html[Documentation] +
[cols=2*]
|===
|`username`
|`string` - The username of the user to enable

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|===

=== security.getApiKey

[source,ts]
----
client.security.getApiKey({
  id: string,
  name: string,
  username: string,
  realm_name: string,
  owner: boolean
})
----
link:{ref}/security-api-get-api-key.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - API key id of the API key to be retrieved

|`name`
|`string` - API key name of the API key to be retrieved

|`username`
|`string` - user name of the user who created this API key to be retrieved

|`realm_name` or `realmName`
|`string` - realm name of the user who created this API key to be retrieved

|`owner`
|`boolean` - flag to query API keys owned by the currently authenticated user

|===

=== security.getBuiltinPrivileges

[source,ts]
----
client.security.getBuiltinPrivileges()
----
link:{ref}/security-api-get-builtin-privileges.html[Documentation] +


=== security.getPrivileges

[source,ts]
----
client.security.getPrivileges({
  application: string,
  name: string
})
----
link:{ref}/security-api-get-privileges.html[Documentation] +
[cols=2*]
|===
|`application`
|`string` - Application name

|`name`
|`string` - Privilege name

|===

=== security.getRole

[source,ts]
----
client.security.getRole({
  name: string | string[]
})
----
link:{ref}/security-api-get-role.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of role names

|===

=== security.getRoleMapping

[source,ts]
----
client.security.getRoleMapping({
  name: string | string[]
})
----
link:{ref}/security-api-get-role-mapping.html[Documentation] +
[cols=2*]
|===
|`name`
|`string \| string[]` - A comma-separated list of role-mapping names

|===

=== security.getToken

[source,ts]
----
client.security.getToken({
  body: object
})
----
link:{ref}/security-api-get-token.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The token request to get

|===

=== security.getUser

[source,ts]
----
client.security.getUser({
  username: string | string[]
})
----
link:{ref}/security-api-get-user.html[Documentation] +
[cols=2*]
|===
|`username`
|`string \| string[]` - A comma-separated list of usernames

|===

=== security.getUserPrivileges

[source,ts]
----
client.security.getUserPrivileges()
----
link:{ref}/security-api-get-privileges.html[Documentation] +


=== security.hasPrivileges

[source,ts]
----
client.security.hasPrivileges({
  user: string,
  body: object
})
----
link:{ref}/security-api-has-privileges.html[Documentation] +
[cols=2*]
|===
|`user`
|`string` - Username

|`body`
|`object` - The privileges to test

|===

=== security.invalidateApiKey

[source,ts]
----
client.security.invalidateApiKey({
  body: object
})
----
link:{ref}/security-api-invalidate-api-key.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The api key request to invalidate API key(s)

|===

=== security.invalidateToken

[source,ts]
----
client.security.invalidateToken({
  body: object
})
----
link:{ref}/security-api-invalidate-token.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The token to invalidate

|===

=== security.putPrivileges

[source,ts]
----
client.security.putPrivileges({
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-put-privileges.html[Documentation] +
[cols=2*]
|===
|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - The privilege(s) to add

|===

=== security.putRole

[source,ts]
----
client.security.putRole({
  name: string,
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-put-role.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - Role name

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - The role to add

|===

=== security.putRoleMapping

[source,ts]
----
client.security.putRoleMapping({
  name: string,
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-put-role-mapping.html[Documentation] +
[cols=2*]
|===
|`name`
|`string` - Role-mapping name

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - The role mapping to add

|===

=== security.putUser

[source,ts]
----
client.security.putUser({
  username: string,
  refresh: 'true' | 'false' | 'wait_for',
  body: object
})
----
link:{ref}/security-api-put-user.html[Documentation] +
[cols=2*]
|===
|`username`
|`string` - The username of the User

|`refresh`
|`'true' \| 'false' \| 'wait_for'` - If `true` (the default) then refresh the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` then do nothing with refreshes.

|`body`
|`object` - The user to add

|===

=== slm.deleteLifecycle

[source,ts]
----
client.slm.deleteLifecycle({
  policy_id: string
})
----
link:{ref}/slm-api-delete-policy.html[Documentation] +
[cols=2*]
|===
|`policy_id` or `policyId`
|`string` - The id of the snapshot lifecycle policy to remove

|===

=== slm.executeLifecycle

[source,ts]
----
client.slm.executeLifecycle({
  policy_id: string
})
----
link:{ref}/slm-api-execute-lifecycle.html[Documentation] +
[cols=2*]
|===
|`policy_id` or `policyId`
|`string` - The id of the snapshot lifecycle policy to be executed

|===

=== slm.executeRetention

[source,ts]
----
client.slm.executeRetention()
----
link:{ref}/slm-api-execute-retention.html[Documentation] +


=== slm.getLifecycle

[source,ts]
----
client.slm.getLifecycle({
  policy_id: string | string[]
})
----
link:{ref}/slm-api-get-policy.html[Documentation] +
[cols=2*]
|===
|`policy_id` or `policyId`
|`string \| string[]` - Comma-separated list of snapshot lifecycle policies to retrieve

|===

=== slm.getStats

[source,ts]
----
client.slm.getStats()
----
link:{ref}/slm-api-get-stats.html[Documentation] +


=== slm.getStatus

[source,ts]
----
client.slm.getStatus()
----
link:{ref}/slm-api-get-status.html[Documentation] +


=== slm.putLifecycle

[source,ts]
----
client.slm.putLifecycle({
  policy_id: string,
  body: object
})
----
link:{ref}/slm-api-put-policy.html[Documentation] +
[cols=2*]
|===
|`policy_id` or `policyId`
|`string` - The id of the snapshot lifecycle policy

|`body`
|`object` - The snapshot lifecycle policy definition to register

|===

=== slm.start

[source,ts]
----
client.slm.start()
----
link:{ref}/slm-api-start.html[Documentation] +


=== slm.stop

[source,ts]
----
client.slm.stop()
----
link:{ref}/slm-api-stop.html[Documentation] +


=== sql.clearCursor

[source,ts]
----
client.sql.clearCursor({
  body: object
})
----
link:{ref}/sql-pagination.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - Specify the cursor value in the `cursor` element to clean the cursor.

|===

=== sql.query

[source,ts]
----
client.sql.query({
  format: string,
  body: object
})
----
link:{ref}/sql-rest-overview.html[Documentation] +
{jsclient}/sql_query_examples.html[Code Example] +
[cols=2*]
|===
|`format`
|`string` - a short version of the Accept header, e.g. json, yaml

|`body`
|`object` - Use the `query` element to start a query. Use the `cursor` element to continue a query.

|===

=== sql.translate

[source,ts]
----
client.sql.translate({
  body: object
})
----
link:{ref}/sql-translate.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - Specify the query in the `query` element.

|===

=== ssl.certificates

[source,ts]
----
client.ssl.certificates()
----
link:{ref}/security-api-ssl.html[Documentation] +


=== transform.deleteTransform

[source,ts]
----
client.transform.deleteTransform({
  transform_id: string,
  force: boolean
})
----
link:{ref}/delete-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to delete

|`force`
|`boolean` - When `true`, the transform is deleted regardless of its current state. The default value is `false`, meaning that the transform must be `stopped` before it can be deleted.

|===

=== transform.getTransform

[source,ts]
----
client.transform.getTransform({
  transform_id: string,
  from: number,
  size: number,
  allow_no_match: boolean
})
----
link:{ref}/get-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id or comma delimited list of id expressions of the transforms to get, '_all' or '*' implies get all transforms

|`from`
|`number` - skips a number of transform configs, defaults to 0

|`size`
|`number` - specifies a max number of transforms to get, defaults to 100

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|===

=== transform.getTransformStats

[source,ts]
----
client.transform.getTransformStats({
  transform_id: string,
  from: number,
  size: number,
  allow_no_match: boolean
})
----
link:{ref}/get-transform-stats.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform for which to get stats. '_all' or '*' implies all transforms

|`from`
|`number` - skips a number of transform stats, defaults to 0

|`size`
|`number` - specifies a max number of transform stats to get, defaults to 100

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|===

=== transform.previewTransform

[source,ts]
----
client.transform.previewTransform({
  body: object
})
----
link:{ref}/preview-transform.html[Documentation] +
[cols=2*]
|===
|`body`
|`object` - The definition for the transform to preview

|===

=== transform.putTransform

[source,ts]
----
client.transform.putTransform({
  transform_id: string,
  defer_validation: boolean,
  body: object
})
----
link:{ref}/put-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the new transform.

|`defer_validation` or `deferValidation`
|`boolean` - If validations should be deferred until transform starts, defaults to false.

|`body`
|`object` - The transform definition

|===

=== transform.startTransform

[source,ts]
----
client.transform.startTransform({
  transform_id: string,
  timeout: string
})
----
link:{ref}/start-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to start

|`timeout`
|`string` - Controls the time to wait for the transform to start

|===

=== transform.stopTransform

[source,ts]
----
client.transform.stopTransform({
  transform_id: string,
  force: boolean,
  wait_for_completion: boolean,
  timeout: string,
  allow_no_match: boolean,
  wait_for_checkpoint: boolean
})
----
link:{ref}/stop-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform to stop

|`force`
|`boolean` - Whether to force stop a failed transform or not. Default to false

|`wait_for_completion` or `waitForCompletion`
|`boolean` - Whether to wait for the transform to fully stop before returning or not. Default to false

|`timeout`
|`string` - Controls the time to wait until the transform has stopped. Default to 30 seconds

|`allow_no_match` or `allowNoMatch`
|`boolean` - Whether to ignore if a wildcard expression matches no transforms. (This includes `_all` string or when no transforms have been specified)

|`wait_for_checkpoint` or `waitForCheckpoint`
|`boolean` - Whether to wait for the transform to reach a checkpoint before stopping. Default to false

|===

=== transform.updateTransform

[source,ts]
----
client.transform.updateTransform({
  transform_id: string,
  defer_validation: boolean,
  body: object
})
----
link:{ref}/update-transform.html[Documentation] +
[cols=2*]
|===
|`transform_id` or `transformId`
|`string` - The id of the transform.

|`defer_validation` or `deferValidation`
|`boolean` - If validations should be deferred until transform starts, defaults to false.

|`body`
|`object` - The update transform definition

|===

=== watcher.ackWatch

[source,ts]
----
client.watcher.ackWatch({
  watch_id: string,
  action_id: string | string[]
})
----
link:{ref}/watcher-api-ack-watch.html[Documentation] +
[cols=2*]
|===
|`watch_id` or `watchId`
|`string` - Watch ID

|`action_id` or `actionId`
|`string \| string[]` - A comma-separated list of the action ids to be acked

|===

=== watcher.activateWatch

[source,ts]
----
client.watcher.activateWatch({
  watch_id: string
})
----
link:{ref}/watcher-api-activate-watch.html[Documentation] +
[cols=2*]
|===
|`watch_id` or `watchId`
|`string` - Watch ID

|===

=== watcher.deactivateWatch

[source,ts]
----
client.watcher.deactivateWatch({
  watch_id: string
})
----
link:{ref}/watcher-api-deactivate-watch.html[Documentation] +
[cols=2*]
|===
|`watch_id` or `watchId`
|`string` - Watch ID

|===

=== watcher.deleteWatch

[source,ts]
----
client.watcher.deleteWatch({
  id: string
})
----
link:{ref}/watcher-api-delete-watch.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Watch ID

|===

=== watcher.executeWatch

[source,ts]
----
client.watcher.executeWatch({
  id: string,
  debug: boolean,
  body: object
})
----
link:{ref}/watcher-api-execute-watch.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Watch ID

|`debug`
|`boolean` - indicates whether the watch should execute in debug mode

|`body`
|`object` - Execution control

|===

=== watcher.getWatch

[source,ts]
----
client.watcher.getWatch({
  id: string
})
----
link:{ref}/watcher-api-get-watch.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Watch ID

|===

=== watcher.putWatch

[source,ts]
----
client.watcher.putWatch({
  id: string,
  active: boolean,
  version: number,
  if_seq_no: number,
  if_primary_term: number,
  body: object
})
----
link:{ref}/watcher-api-put-watch.html[Documentation] +
[cols=2*]
|===
|`id`
|`string` - Watch ID

|`active`
|`boolean` - Specify whether the watch is in/active by default

|`version`
|`number` - Explicit version number for concurrency control

|`if_seq_no` or `ifSeqNo`
|`number` - only update the watch if the last operation that has changed the watch has the specified sequence number

|`if_primary_term` or `ifPrimaryTerm`
|`number` - only update the watch if the last operation that has changed the watch has the specified primary term

|`body`
|`object` - The watch

|===

=== watcher.start

[source,ts]
----
client.watcher.start()
----
link:{ref}/watcher-api-start.html[Documentation] +


=== watcher.stats

[source,ts]
----
client.watcher.stats({
  metric: string | string[],
  emit_stacktraces: boolean
})
----
link:{ref}/watcher-api-stats.html[Documentation] +
[cols=2*]
|===
|`metric`
|`string \| string[]` - Controls what additional stat metrics should be include in the response

|`emit_stacktraces` or `emitStacktraces`
|`boolean` - Emits stack traces of currently running watches

|===

=== watcher.stop

[source,ts]
----
client.watcher.stop()
----
link:{ref}/watcher-api-stop.html[Documentation] +


=== xpack.info

[source,ts]
----
client.xpack.info({
  categories: string | string[],
  accept_enterprise: boolean
})
----
link:{ref}/info-api.html[Documentation] +
[cols=2*]
|===
|`categories`
|`string \| string[]` - Comma-separated list of info categories. Can be any of: build, license, features

|`accept_enterprise` or `acceptEnterprise`
|`boolean` - Supported for backwards compatibility with 7.x. If this param is used it must be set to true +

WARNING: This parameter has been deprecated.

|===

=== xpack.usage

[source,ts]
----
client.xpack.usage({
  master_timeout: string
})
----
link:{ref}/usage-api.html[Documentation] +
[cols=2*]
|===
|`master_timeout` or `masterTimeout`
|`string` - Specify timeout for watch write operation

|===
