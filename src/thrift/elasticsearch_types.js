//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.Method = {
'GET' : 0,
'PUT' : 1,
'POST' : 2,
'DELETE' : 3,
'HEAD' : 4,
'OPTIONS' : 5
};
ttypes.Status = {
'CONT' : 100,
'SWITCHING_PROTOCOLS' : 101,
'OK' : 200,
'CREATED' : 201,
'ACCEPTED' : 202,
'NON_AUTHORITATIVE_INFORMATION' : 203,
'NO_CONTENT' : 204,
'RESET_CONTENT' : 205,
'PARTIAL_CONTENT' : 206,
'MULTI_STATUS' : 207,
'MULTIPLE_CHOICES' : 300,
'MOVED_PERMANENTLY' : 301,
'FOUND' : 302,
'SEE_OTHER' : 303,
'NOT_MODIFIED' : 304,
'USE_PROXY' : 305,
'TEMPORARY_REDIRECT' : 307,
'BAD_REQUEST' : 400,
'UNAUTHORIZED' : 401,
'PAYMENT_REQUIRED' : 402,
'FORBIDDEN' : 403,
'NOT_FOUND' : 404,
'METHOD_NOT_ALLOWED' : 405,
'NOT_ACCEPTABLE' : 406,
'PROXY_AUTHENTICATION' : 407,
'REQUEST_TIMEOUT' : 408,
'CONFLICT' : 409,
'GONE' : 410,
'LENGTH_REQUIRED' : 411,
'PRECONDITION_FAILED' : 412,
'REQUEST_ENTITY_TOO_LARGE' : 413,
'REQUEST_URI_TOO_LONG' : 414,
'UNSUPPORTED_MEDIA_TYPE' : 415,
'REQUESTED_RANGE_NOT_SATISFIED' : 416,
'EXPECTATION_FAILED' : 417,
'UNPROCESSABLE_ENTITY' : 422,
'LOCKED' : 423,
'FAILED_DEPENDENCY' : 424,
'INTERNAL_SERVER_ERROR' : 500,
'NOT_IMPLEMENTED' : 501,
'BAD_GATEWAY' : 502,
'SERVICE_UNAVAILABLE' : 503,
'GATEWAY_TIMEOUT' : 504,
'INSUFFICIENT_STORAGE' : 506
};
RestRequest = module.exports.RestRequest = function(args) {
  this.method = null;
  this.uri = null;
  this.parameters = null;
  this.headers = null;
  this.body = null;
  if (args) {
    if (args.method !== undefined) {
      this.method = args.method;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
    if (args.headers !== undefined) {
      this.headers = args.headers;
    }
    if (args.body !== undefined) {
      this.body = args.body;
    }
  }
};
RestRequest.prototype = {};
RestRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.method = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.parameters = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.parameters[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.headers = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readString();
          this.headers[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RestRequest.prototype.write = function(output) {
  output.writeStructBegin('RestRequest');
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.I32, 1);
    output.writeI32(this.method);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 2);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter16 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter16))
      {
        var viter17 = this.parameters[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.headers));
    for (var kiter18 in this.headers)
    {
      if (this.headers.hasOwnProperty(kiter18))
      {
        var viter19 = this.headers[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 5);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RestResponse = module.exports.RestResponse = function(args) {
  this.status = null;
  this.headers = null;
  this.body = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.headers !== undefined) {
      this.headers = args.headers;
    }
    if (args.body !== undefined) {
      this.body = args.body;
    }
  }
};
RestResponse.prototype = {};
RestResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.headers = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var key26 = null;
          var val27 = null;
          key26 = input.readString();
          val27 = input.readString();
          this.headers[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RestResponse.prototype.write = function(output) {
  output.writeStructBegin('RestResponse');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.headers));
    for (var kiter28 in this.headers)
    {
      if (this.headers.hasOwnProperty(kiter28))
      {
        var viter29 = this.headers[kiter28];
        output.writeString(kiter28);
        output.writeString(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

